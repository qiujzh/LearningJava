package com.mgatelabs.swftools.exploit.io;

import com.mgatelabs.swftools.support.filters.CommonFileFilter;
import com.mgatelabs.swftools.support.swf.objects.*;
import com.mgatelabs.swftools.support.tools.BrowserControl;
import com.mgatelabs.swftools.support.tools.FileNameHelper;

import javax.swing.*;
import java.io.File;
import java.io.FileOutputStream;

public class ExportableObject {
    private JFileChooser myJFileChooser;
    private JFrame myFrame;

    public ExportableObject(JFileChooser aJFileChooser, JFrame aFrame) {
        myJFileChooser = aJFileChooser;
        myFrame = aFrame;
    }

    public boolean exportSvg(FMovie aFlashObject, FMovieData aMovie, boolean compress, boolean nice, boolean zero) {
        //FMovie aFlashObject = myExploitMovieControlPanel.getFlashObject();
        //FMovieData aMovie   = myExploitMovieControlPanel.getFlashMovieData();

        if (aFlashObject != null && aMovie != null) {
            File destination = null;
            myJFileChooser.resetChoosableFileFilters();

            if (compress == false) {
                myJFileChooser.setFileFilter(new CommonFileFilter(".svg", "Scalable Vector Graphics (1.1)"));

            } else {
                myJFileChooser.setFileFilter(new CommonFileFilter(".svgz", "Scalable Vector Graphics(GZip) (1.1)"));
            }

            if (myJFileChooser.showSaveDialog(myFrame) == JFileChooser.APPROVE_OPTION) {
                destination = myJFileChooser.getSelectedFile();
            }

            if (destination != null) { // Were Good

                if (compress == false) {
                    destination = FileNameHelper.checkFile(destination, ".svg");
                } else {
                    destination = FileNameHelper.checkFile(destination, ".svgz");
                }

                if (destination != null) {
                    ExportFrameToSVG fes = new ExportFrameToSVG(destination, aFlashObject, aMovie, compress, nice, zero);
                } else {
                    JOptionPane.showMessageDialog(myFrame, "File name error.  The file must have a .svg at the end.", "File Name Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            myJFileChooser.resetChoosableFileFilters();

            myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));
        }

        return true;
    }

    public boolean exportSound(Object obj, boolean preview) {
        FSound aSound = (FSound) obj;

        myJFileChooser.resetChoosableFileFilters();
        if (aSound.getFormat() == FSound.MP3) {
            myJFileChooser.setFileFilter(new CommonFileFilter(".mp3", "MP3"));
        } else if (aSound.getFormat() == FSound.ADPCM) {
            myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "ADPCM"));
        } else if (aSound.getFormat() == FSound.RAW) {
            myJFileChooser.setFileFilter(new CommonFileFilter(".raw", "RAW"));
        } else if (aSound.getFormat() == FSound.Uncompressed) {
            myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Uncompressed"));
        } else if (aSound.getFormat() == FSound.Nellymoser) {
            myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Nellymoser"));
        }

        int returnVal = myJFileChooser.showSaveDialog(myFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
            File destination = myJFileChooser.getSelectedFile();

            if (aSound.getFormat() == FSound.MP3) {
                //myJFileChooser.setFileFilter(new CommonFileFilter(".mp3", "MP3"));
                destination = FileNameHelper.checkFile(destination, ".mp3");
            } else if (aSound.getFormat() == FSound.ADPCM) {
                //myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "ADPCM"));
                destination = FileNameHelper.checkFile(destination, ".wav");
            } else if (aSound.getFormat() == FSound.RAW) {
                //myJFileChooser.setFileFilter(new CommonFileFilter(".raw", "RAW"));
                destination = FileNameHelper.checkFile(destination, ".raw");
            } else if (aSound.getFormat() == FSound.Uncompressed) {
                //myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Uncompressed"));
                destination = FileNameHelper.checkFile(destination, ".wav");
            } else if (aSound.getFormat() == FSound.Nellymoser) {
                //myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Nellymoser"));
                destination = FileNameHelper.checkFile(destination, ".wav");
            }

            try {
                FileOutputStream fos = new FileOutputStream(destination);

                int[] data = aSound.getData();

                for (int x = 0; x < data.length; x++) {
                    fos.write(data[x]);
                }


                fos.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }

        myJFileChooser.resetChoosableFileFilters();

        myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));

        return true;
    }

    public boolean exportLossless(Object obj, boolean preview) {
        FLossless aLossless = (FLossless) obj;

        if (preview == false) {
            myJFileChooser.resetChoosableFileFilters();

            myJFileChooser.setFileFilter(new CommonFileFilter(".png", "PNG"));

            int returnVal = myJFileChooser.showSaveDialog(myFrame);

            if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                File destination = myJFileChooser.getSelectedFile();

                destination = FileNameHelper.checkFile(destination, ".png");

                try {

                    javax.imageio.ImageIO.write(aLossless.getImage(), "PNG", destination);

                } catch (Exception e) {
                    System.out.println(e);
                }
            }

            myJFileChooser.resetChoosableFileFilters();

            myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));
        } else {
            try {
                File destination = File.createTempFile("flashexploitimage", ".png");

                javax.imageio.ImageIO.write(aLossless.getImage(), "PNG", destination);

                BrowserControl.displayURL(destination.toURL().toString());
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return true;
    }

    public boolean exportImage(Object obj, boolean preview) {
        FBitmap aBitmap = (FBitmap) obj;

        if (aBitmap.getVersion() == 3) {
            FLossless aLoss = new FLossless(aBitmap);
            exportLossless(aLoss, preview);
        }

        if (preview == false) {
            myJFileChooser.resetChoosableFileFilters();

            myJFileChooser.setFileFilter(new CommonFileFilter(".jpg", "JPEG"));

            int returnVal = myJFileChooser.showSaveDialog(myFrame);

            if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                File destination = myJFileChooser.getSelectedFile();

                destination = FileNameHelper.checkFile(destination, ".jpg");

                try {
                    if (aBitmap.getData() != null) {
                        FileOutputStream fos = new FileOutputStream(destination);

                        byte[] data = aBitmap.getData();

                        for (int x = 0; x < data.length; x++) {
                            fos.write(data[x]);
                        }

                        fos.close();
                    } else {
                        javax.imageio.ImageIO.write(aBitmap.getImage(), "JPG", destination);
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }

            myJFileChooser.resetChoosableFileFilters();

            myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));
        } else {
            try {
                File destination = File.createTempFile("flashexploitimage", ".jpg");
                if (aBitmap.getData() != null) {
                    FileOutputStream fos = new FileOutputStream(destination);

                    byte[] data = aBitmap.getData();

                    for (int x = 0; x < data.length; x++) {
                        fos.write(data[x]);
                    }

                    fos.close();
                } else {
                    // Dirty
                    javax.imageio.ImageIO.write(aBitmap.getImage(), "JPG", destination);
                }
                BrowserControl.displayURL(destination.toURL().toString());
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return true;
    }
}