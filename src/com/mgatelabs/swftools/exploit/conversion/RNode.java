/*
    Copyright M-Gate Labs 2007
*/

/**
 <p>
 <b>Render Graph Node</b>
 </p>
 <p>
 This is a single node from the render graph, it can have multiple connecting nodes.
 Each node has a direction.
 This is where a converter can prove itself or fail.
 </p>
 */

package com.mgatelabs.swftools.exploit.conversion;

import java.util.Vector;

public class RNode {
    private RBase myObject;
    private int myID;
    private boolean active;
    private Vector parents;
    private Vector children;
    public RNode parent;
    public RNode child;
    public boolean flag;
    public RGraph myGraph;

    public RNode(RBase aObject, int id, RGraph parentGraph) {
        active = true;
        myObject = aObject;
        parents = new Vector();
        children = new Vector();
        parent = null;
        child = null;
        flag = false;
        myID = id;
        myGraph = parentGraph;
    }

    public RGraph getGraph() {
        return myGraph;
    }

    // Mark the node as used
    public void lockdown() {
        active = false;
    }

    // Test if the node is still alive
    public boolean isAlive() {
        return active;
    }

    public int getID() {
        return myID;
    }

    public RBase getObject() {
        return myObject;
    }

    public void reset() {
        parents.clear();
        children.clear();
        parent = null;
        child = null;
    }

    public void clean() {
        parent = null;
        child = null;
    }

    // Clean out a nodes children and parent connections
    public void wipe() {
        for (int x = 0; x < getChildCount(); x++) {
            RNode aChild = getChild(x);
            aChild.removeParent(this);
        }

        for (int x = 0; x < getParentCount(); x++) {
            RNode aParent = getParent(x);
            aParent.removeChild(this);
        }

        parents.clear();

        children.clear();

        active = false;
        //reset();
    }

    // Test if this node is in the middle of a line
    public boolean isNormal() {
        if (getChildCount() <= 1 && getParentCount() <= 1) {
            return true;
        }
        return false;
    }

    public int getChildCount() {
        return children.size();
    }

    public int getParentCount() {
        return parents.size();
    }

    public RNode getChild(int index) {
        if (index < getChildCount() && index >= 0) {
            return (RNode) children.get(index);
        } else {
            return null;
        }
    }

    public RNode getParent(int index) {
        if (index < getParentCount() && index >= 0) {
            return (RNode) parents.get(index);
        } else {
            return null;
        }
    }

    public void removeParent(RNode aParent) {
        parents.remove(aParent);
    }

    public void removeChild(RNode child) {
        children.remove(child);
    }

    // Test is a child exists the the correct ID
    public boolean hasChild(int id) {
        for (int x = 0; x < getChildCount(); x++) {
            if (getChild(x).getID() == id) {
                return true;
            }
        }
        return false;
    }

    public void addChild(RNode node) {
        children.add(node);
    }

    public void addParent(RNode node) {
        parents.add(node);
    }
}