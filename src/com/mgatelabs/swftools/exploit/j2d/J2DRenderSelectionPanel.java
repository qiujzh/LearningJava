package com.mgatelabs.swftools.exploit.j2d;

import com.mgatelabs.swftools.support.plugins.PluginInfo;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.Vector;

public class J2DRenderSelectionPanel extends JPanel {
    private BufferedImage bimg;
    private int myWidth, myHeight;

    private Vector myDataCategories;

    private int mode;

    private DataCategory myCategory;

    private boolean allowQuality;

    private int page;

    private final int PAGE = 8;

    private Vector myShapes;

    private J2DButtonInfo myNormalButtonInfo;
    private J2DButtonInfo myProButtonInfo;
    private J2DButtonInfo myMarkButtonInfo;
    private J2DButtonInfo myBigButtonInfo;

    // Animate
    private boolean animate;
    private int animateSteps;
    private int[] animateScript;
    private int animateScriptPos;

    private final int ANIMATESTOP = 0;
    private final int ANIMATEINUP = 1;
    private final int ANIMATEINDOWN = 2;
    private final int ANIMATEUP = 3;
    private final int ANIMATEDOWN = 4;
    private final int ANIMATEUPDATE = 5;

    private javax.swing.Timer myTimer;

    // Constructor/////////////////////////////////////////////////////////////

    public J2DRenderSelectionPanel() {
        myDataCategories = new Vector();

        myShapes = new Vector();

        myCategory = null;
        allowQuality = true;
        page = 0;

        setupFonts();

        myTimer = new javax.swing.Timer((int) (50.0f), new ExploitActionListener());

        this.addMouseListener(new DisplayMouseListener());
    }

    private void setupFonts() {
        Font bigFont = new Font("Arial", Font.BOLD, 20);
        Font normalFont = new Font("Arial", Font.PLAIN, 12);
        Font normalSelectedFont = new Font("Arial", Font.BOLD, 12);

        Font normalBiggerFont = new Font("Arial", Font.BOLD, 14);

        myNormalButtonInfo = new J2DButtonInfo(normalFont, normalSelectedFont, new Color(188, 188, 188), new Color(150, 150, 150), new Color(0, 0, 0), new Color(9, 9, 234), new Color(0, 0, 0), new Color(50, 50, 50));

        myProButtonInfo = new J2DButtonInfo(normalFont, normalSelectedFont, new Color(250, 228, 107), new Color(249, 221, 62), new Color(0, 0, 0), new Color(9, 9, 234), new Color(0, 0, 0), new Color(50, 50, 50));

        myMarkButtonInfo = new J2DButtonInfo(normalBiggerFont, normalBiggerFont, new Color(120, 245, 120), new Color(18, 230, 13), new Color(0, 0, 0), new Color(9, 9, 234), new Color(2, 239, 10), new Color(239, 3, 3));

        myBigButtonInfo = new J2DButtonInfo(bigFont, bigFont, new Color(188, 188, 188), new Color(150, 150, 150), new Color(0, 0, 0), new Color(9, 9, 234), new Color(0, 0, 0), new Color(50, 50, 50));
        ;

    }

    // Animation

    private void animateTo(boolean bottomUp, boolean moveUp) {
        animateSteps = 11;
        animate = true;

        for (int x = 0; x < myShapes.size(); x++) {
            J2DShape aShape = (J2DShape) myShapes.get(x);

            J2DLAnimate myAnimate = null;

            if (moveUp) {
                myAnimate = new J2DLAnimate(aShape, animateSteps - 1, aShape.getX(), aShape.getY(), aShape.getX(), aShape.getY() - 480 - (aShape.getY() / 0.5f));
            } else {
                myAnimate = new J2DLAnimate(aShape, animateSteps - 1, aShape.getX(), aShape.getY(), aShape.getX(), aShape.getY() + 480 + (aShape.getY() / 0.5f));
            }

            myShapes.set(x, myAnimate);
        }

    }

    private void animateFrom(boolean bottomUp, boolean moveUp) {
        animateSteps = 11;
        animate = true;

        for (int x = 0; x < myShapes.size(); x++) {
            J2DShape aShape = (J2DShape) myShapes.get(x);

            J2DLAnimate myAnimate = null;

            if (!moveUp) {
                myAnimate = new J2DLAnimate(aShape, animateSteps - 1, aShape.getX(), aShape.getY() - 480 - (aShape.getY() / 0.5f), aShape.getX(), aShape.getY());
            } else {
                myAnimate = new J2DLAnimate(aShape, animateSteps - 1, aShape.getX(), aShape.getY() + 480 + (aShape.getY() / 0.5f), aShape.getX(), aShape.getY());
            }

            myShapes.set(x, myAnimate);
        }

    }

    // End Animation

    private void setupScreen() {
        myShapes.clear();

        if (myCategory != null) {
            setupPluginMenu();
        } else {

            setupCategoryMenu();
        }

    }

    private void setupCategoryMenu() {
        // Add Top Button Label
        J2DButton aButton = new J2DButton("Plugin Categories", -1, myBigButtonInfo, 10, 10, 360, 32);
        aButton.setSpecial();
        myShapes.add(aButton);


        int pos = 0;
        for (int x = page * PAGE; x < myDataCategories.size() && pos < 8; x++) {
            // Go Through the List and do Stuff
            DataCategory aCategory = (DataCategory) myDataCategories.get(x);

            myShapes.add(new J2DButton(aCategory.getName(), x, myNormalButtonInfo, 57, 60 + (32 * pos), 256, 24));

            //PluginInfo pi = aCategory.isSelection();

            if (!aCategory.isSelection()) {
                J2DButton lb = new J2DButton("(Click Me)", x, myMarkButtonInfo, 290, 60 + (32 * pos), 128, 24);
                myShapes.add(lb);
                lb.setSelected(true);
                lb.setSpecial();
            }

            pos++;
        }
    }

    private void setupPluginMenu() {
        J2DButton aButton = new J2DButton("Plugins: " + myCategory.getName(), -1, myBigButtonInfo, 10, 10, 360, 32);
        aButton.setSpecial();
        myShapes.add(aButton);

        int pos = 0;

        for (int x = page * PAGE; x < myCategory.getData().size() && pos < 8; x++) {
            PluginInfo aPlugin = (PluginInfo) myCategory.getData().get(x);

            aButton = new J2DButton(aPlugin.name, x, aPlugin.encrypted ? myProButtonInfo : myNormalButtonInfo, 32, 60 + (32 * pos), 256, 24);

            myShapes.add(aButton);

            if (myCategory.isSelection(aPlugin.id))// == myCategory.getSelectionIndex())
            {
                aButton.setSelected(true);
            }

            if (aPlugin.encrypted) {
                J2DButton lb = new J2DButton("PRO", x, myMarkButtonInfo, 290, 60 + (32 * pos), 64, 24);
                myShapes.add(lb);
                lb.setSelected(true);
                lb.setSpecial();
            } else {
                J2DButton lb = new J2DButton("FREE", x, myMarkButtonInfo, 290, 60 + (32 * pos), 64, 24);
                myShapes.add(lb);
                lb.setSpecial();
            }

            pos++;
        }

        myShapes.add(new J2DButton("Back", -2, myNormalButtonInfo, 10, 410, 128, 24));
    }

    // Data Elements///////////////////////////////////////////////////////////

    public void addCategory(String name, int type, int maxSize) {
        myDataCategories.add(new DataCategory(name, type, maxSize));
    }

    public void addToCategory(PluginInfo plugin) {
        for (int x = 0; x < myDataCategories.size(); x++) {
            DataCategory dc = (DataCategory) myDataCategories.get(x);
            if (dc.getType() == plugin.type) {
                dc.addPlugin(plugin);
                break;
            }
        }
    }

    public DataCategory getCategory(int type) {
        for (int x = 0; x < myDataCategories.size(); x++) {
            DataCategory dc = (DataCategory) myDataCategories.get(x);
            if (dc.getType() == type) {
                return dc;
            }
        }

        return null;
    }

    public Vector getCategories() {
        return myDataCategories;
    }

    public boolean ready() {

        for (int x = 0; x < myDataCategories.size(); x++) {
            DataCategory dc = (DataCategory) myDataCategories.get(x);
            if (dc.getMaxSelection() == 1) {
                if (!dc.isSelection()) {
                    return false;
                }
            }
        }

        return true;
    }

    // Rendering///////////////////////////////////////////////////////////////

    // Create A Graphics Object

    public Graphics2D createGraphics2D() {
        Graphics2D g2 = null;

        if (bimg == null || bimg.getWidth() != getWidth() || bimg.getHeight() != getHeight()) {
            bimg = (BufferedImage) createImage(getWidth(), getHeight());
        }

        g2 = bimg.createGraphics();

        g2.setBackground(Color.WHITE);

        g2.clearRect(0, 0, getWidth(), getHeight());


        setQuality(allowQuality, g2);

        return g2;
    }

    // Set Graphic Quality

    private void setQuality(boolean quality, Graphics2D g2) {
        if (!quality) {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_OFF);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_SPEED);
        } else {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
        }
    }

    // All Might Paint Function

    public void paint(Graphics g) {
        Graphics2D g2 = createGraphics2D();

        if (myShapes.size() == 0) {
            setupScreen();
        }

        g2.setStroke(new BasicStroke(1));

        for (int x = 0; x < myShapes.size(); x++) {
            J2DShape aShape = (J2DShape) myShapes.get(x);
            aShape.render(g2);
        }

        g.drawImage(bimg, 0, 0, this);
    }

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == myTimer) {
                myTimer.stop();

                //System.out.println("Step: " + animateSteps);

                if (animateSteps <= 0) {
                    animateScriptPos++;

                    if ((animateScript[animateScriptPos]) == ANIMATEUPDATE) {
                        //System.out.println("ANIMATEUPDATE");
                        setupScreen();
                        animateScriptPos++;
                    }

                    switch (animateScript[animateScriptPos]) {
                        case ANIMATESTOP:
                            //System.out.println("ANIMATESTOP");
                            animate = false;
                            setupScreen();
                            return;
                        case ANIMATEINUP:

                            //System.out.println("ANIMATEINUP");
                            animateFrom(false, true);

                            break;
                        case ANIMATEINDOWN:

                            //System.out.println("ANIMATEINDOWN");
                            animateFrom(false, false);

                            break;
                        case ANIMATEUP:
                            //System.out.println("ANIMATEUP");
                            animateTo(false, true);

                            break;
                        case ANIMATEDOWN:
                            //System.out.println("ANIMATEDOWN");
                            animateTo(false, false);

                            break;
                    }

                }

                animateSteps--;


                repaint();

                myTimer.start();
            }
        }
    }

    // Mouse Handling
    private class DisplayMouseListener implements MouseListener {

        public DisplayMouseListener() {
        }

        public void mouseClicked(MouseEvent e) {

            for (int x = 0; x < myShapes.size(); x++) {
                J2DShape aShape = (J2DShape) myShapes.get(x);

                if (aShape.hit(e.getX(), e.getY())) {
                    if (myCategory != null) // Plugin Menu
                    {
                        if (aShape.getID() >= 0) {
                            PluginInfo aPlugin = (PluginInfo) myCategory.getData().get(aShape.getID());

                            myCategory.toggleSelection(aPlugin.id);
                            setupScreen();
                            repaint();
                            return;
                        }

                        if (aShape.getID() == -2) // Back
                        {
                            myCategory = null;

                            int[] tempScript = {ANIMATEDOWN, ANIMATEUPDATE, ANIMATEINDOWN, ANIMATESTOP};
                            animateScript = tempScript;
                            animateScriptPos = -1;

                            page = 0;

                            myTimer.start();

                            //setupScreen();
                            //repaint();
                            return;
                        }

                    } else {
                        if (aShape.getID() >= 0) {
                            myCategory = (DataCategory) myDataCategories.get(aShape.getID());

                            int[] tempScript = {ANIMATEUP, ANIMATEUPDATE, ANIMATEINUP, ANIMATESTOP};
                            animateScript = tempScript;
                            animateScriptPos = -1;

                            page = 0;

                            myTimer.start();
                            return;
                        }
                        // else if ( aShape.getID() == -1337)
                        //                      {
                        //
                        //                      }
                    }


                }

            }
        }

        public void mouseEntered(MouseEvent e) {

        }

        public void mouseExited(MouseEvent e) {


        }

        public void mousePressed(MouseEvent e) {

        }

        public void mouseReleased(MouseEvent e) {

        }
    }
}