package com.mgatelabs.swftools.exploit.gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GuiDisplayControls extends JPanel {

    private GuiDisplay myDisplay;

    private JButton buttonAutoScale;
    private JButton buttonLine;
    private JButton buttonFill;
    private JButton buttonGradient;
    private JButton buttonDrag;
    private JButton buttonQuality;

    public GuiDisplayControls(GuiDisplay aDisplay) {
        myDisplay = aDisplay;

        buildButtons();
        buildPanel();
    }

    private void buildPanel() {
        this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
        this.add(buttonAutoScale);
        //this.add(buttonLine);
        //this.add(buttonFill);
        this.add(buttonGradient);
        this.add(buttonQuality);
        this.add(Box.createHorizontalGlue());
        this.add(buttonDrag);
    }

    private void buildButtons() {
        buttonAutoScale = new JButton();
        buttonAutoScale.setToolTipText("Toggle: Window Scale");

        buttonLine = new JButton();
        buttonLine.setToolTipText("Toggle: Line");

        buttonFill = new JButton();
        buttonFill.setToolTipText("Toggle: Fill");

        buttonGradient = new JButton();
        buttonGradient.setToolTipText("Toggle: Gradient");

        buttonDrag = new JButton();
        buttonDrag.setToolTipText("Toggle: Drag Mode");

        buttonQuality = new JButton();
        buttonQuality.setToolTipText("Toggle: Quality");

        ExploitActionListener myExploitActionListener = new ExploitActionListener();

        buttonAutoScale.addActionListener(myExploitActionListener);
        buttonLine.addActionListener(myExploitActionListener);
        buttonFill.addActionListener(myExploitActionListener);
        buttonGradient.addActionListener(myExploitActionListener);
        buttonDrag.addActionListener(myExploitActionListener);
        buttonQuality.addActionListener(myExploitActionListener);
    }

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == buttonAutoScale) {
                if (!myDisplay.toggleAutoScale()) {
                    buttonAutoScale.setBackground(Color.GRAY);
                } else {
                    buttonAutoScale.setBackground(null);
                }
                myDisplay.update();
            } else if (e.getSource() == buttonLine) {
                if (!myDisplay.toggleLine()) {
                    buttonLine.setBackground(Color.GRAY);
                } else {
                    buttonLine.setBackground(null);
                }
                myDisplay.update();
            } else if (e.getSource() == buttonFill) {
                if (!myDisplay.toggleFill()) {
                    buttonFill.setBackground(Color.GRAY);
                } else {
                    buttonFill.setBackground(null);
                }
                myDisplay.update();
            } else if (e.getSource() == buttonGradient) {
                if (!myDisplay.toggleGradient()) {
                    buttonGradient.setBackground(Color.GRAY);
                } else {
                    buttonGradient.setBackground(null);
                }
                myDisplay.update();
            } else if (e.getSource() == buttonQuality) {
                if (!myDisplay.toggleQuality()) {
                    buttonQuality.setBackground(Color.GRAY);
                } else {
                    buttonQuality.setBackground(null);
                }
                myDisplay.update();
            } else if (e.getSource() == buttonDrag) {
                if (myDisplay.toggleDrag()) {
                    buttonDrag.setBackground(Color.GRAY);
                } else {
                    buttonDrag.setBackground(null);
                }
                myDisplay.update();
            }
        }
    }

}