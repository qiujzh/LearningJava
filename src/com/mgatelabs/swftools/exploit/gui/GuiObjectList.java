package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.support.swf.objects.FMovie;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;

public class GuiObjectList extends JPanel {
    private Vector MyListeners;
    private GuiObjectListForm myObjectListForm;
    private ChangeListener myChangeListener;
    private FormMouseListener myFormMouseListener;

    ///////////////////////////////////////////////////////////////////////////

    public GuiObjectList() {
        super();

        MyListeners = new Vector();

        myObjectListForm = new GuiObjectListForm(this);

        myChangeListener = new ChangeListener();

        myFormMouseListener = new FormMouseListener();

        myObjectListForm.getTree().addMouseListener(myFormMouseListener);
    }

    ///////////////////////////////////////////////////////////////////////////

    public ExploitChangeListener getListener() {
        return myChangeListener;
    }

    ///////////////////////////////////////////////////////////////////////////

    public void addListener(ExploitTreeListener aListener) {
        MyListeners.add(aListener);
    }

    ///////////////////////////////////////////////////////////////////////////

    private class ChangeListener implements ExploitChangeListener {

        public void movieClose() {
            myObjectListForm.clean(false);
        }

        ///////////////////////////////////////////////////////////////////////

        public void movieOpen(FMovie aMovie) {
            myObjectListForm.update(aMovie);
        }

    }

    ///////////////////////////////////////////////////////////////////////////

    private class FormMouseListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {//Invoked when the mouse button has been clicked (pressed and released) on a component.

            if (e.getButton() == e.BUTTON1) {
                if (e.getClickCount() == 2) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) myObjectListForm.getTree().getLastSelectedPathComponent();
                    if (node == null) {
                        return;
                    }
                    if (node.getUserObject() instanceof String) {
                        return;
                    } else if (node.getUserObject() instanceof GuiTreeItem) {
                        GuiTreeItem aItem = (GuiTreeItem) node.getUserObject();

                        ExploitObject(aItem.getObject());
                    }
                }
            } else {
                //treeItemPopup.show(e.getComponent(), e.getX(), e.getY());
            }

        }

        public void mouseEntered(MouseEvent e) {
        }

        //Invoked when the mouse enters a component.
        public void mouseExited(MouseEvent e) {
        }

        //Invoked when the mouse exits a component.
        public void mousePressed(MouseEvent e) {
        }

        //Invoked when a mouse button has been pressed on a component.
        public void mouseReleased(MouseEvent e) {
        }
        //Invoked when a mouse button has been released on a component.
    }

    ///////////////////////////////////////////////////////////////////////////

    void ExploitObject(Object obj) {
        Vector l;
        //ExploitShapeObject eso = new ExploitShapeObject(aShape);

        synchronized (this) {
            l = (Vector) MyListeners.clone();
        }

        for (int i = 0; i < l.size(); i++) {
            ExploitTreeListener sl = (ExploitTreeListener) l.elementAt(i);
            sl.handleObject(obj);
        }
    }

}