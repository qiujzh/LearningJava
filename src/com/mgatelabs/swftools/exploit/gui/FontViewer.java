package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.io.ExportFrameToSVG;
import com.mgatelabs.swftools.support.filters.CommonFileFilter;
import com.mgatelabs.swftools.support.swf.objects.FFont;
import com.mgatelabs.swftools.support.swf.objects.FMovie;
import com.mgatelabs.swftools.support.swf.objects.FRect;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class FontViewer extends GuiInternal {
    private FFont myFont;

    private JDesktopPane jde;
    private GuiInternal internalFontList;
    private GuiInternal internalFontView;

    private FontDisplay myDisplay;
    private FontGlyphList myGlyphList;

    private int lastIndex;

    private JFileChooser myJFileChooser;
    private JFileChooserHandler myFileMon;

    // Menu

    private JMenuItem menuExportToSvg;

    public FontViewer(JFrame masterFrame, FFont aFont) {
        super("Font Viewer: " + aFont.getName(), false, false, true, false);

        myJFileChooser = new JFileChooser(new File("."));
        myFileMon = new JFileChooserHandler(masterFrame, myJFileChooser, ".svg", "SVG (1.1)");

        myFont = aFont;

        lastIndex = 0;

        buildControls();
        buildMenu();

        this.getContentPane().add(buildGui());
        this.pack();
    }

    ///////////////////////////////////////////////////////////////////////////

    public void buildControls() {
        myJFileChooser.setFileFilter(new CommonFileFilter(".svg", "SVG (1.1)"));

        myDisplay = new FontDisplay(myFont);
        myGlyphList = new FontGlyphList(myFont);
        myGlyphList.getList().addListSelectionListener(new SelectionListener());

        internalFontList = new GuiInternal(myGlyphList, "Available Glyphs", 256, 480, true, true);
        internalFontView = new GuiInternal(myDisplay, "EM Square Preview", 400, 400, true, true);
    }

    //////////////////////////////////////////////////////////////////////////

    public void buildMenu() {
        JMenuBar myMenuBar = new JMenuBar();

        JMenu menuFile = new JMenu("Export");

        myMenuBar.add(menuFile);

        // Export menu /////////////////////////////////////////////////////////

        ExploitActionListener eal = new ExploitActionListener();

        menuExportToSvg = new JMenuItem("Glyph To SVG");
        menuExportToSvg.addActionListener(eal);

        menuFile.add(menuExportToSvg);

        this.setJMenuBar(myMenuBar);
    }

    ///////////////////////////////////////////////////////////////////////////

    private JPanel buildGui() {
        JPanel master = new JPanel();
        master.setLayout(new BoxLayout(master, BoxLayout.X_AXIS));

        jde = new JDesktopPane();
        jde.setDragMode(jde.OUTLINE_DRAG_MODE);

        jde.add(internalFontList);
        jde.add(internalFontView);

        master.add(jde);

        internalFontList.setLocation(0, 0);
        internalFontView.setLocation(300, 0);

        internalFontList.show();
        internalFontView.show();

        return master;
    }

    ///////////////////////////////////////////////////////////////////////////

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == menuExportToSvg) {
                File target = myFileMon.getSaveFile();

                if (target != null) {
                    FMovie aMovie = new FMovie("FWS", 3, 1337, new FRect(0, 0, 1024, 1024), 1, 1);

                    new ExportFrameToSVG(target, aMovie, myFont.getGlyphs()[lastIndex], false, true);
                }
            }

        }
    }

    ///////////////////////////////////////////////////////////////////////////

    private class SelectionListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {
            lastIndex = myGlyphList.getList().getSelectedIndex();

            myDisplay.change(lastIndex);
        }
    }

}