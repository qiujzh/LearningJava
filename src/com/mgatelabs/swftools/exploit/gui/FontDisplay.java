package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.render.AdvancedPath;
import com.mgatelabs.swftools.support.swf.objects.FFont;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.util.Vector;

public class FontDisplay extends JPanel {
    private BufferedImage bimg;
    private FFont myFont;
    private int myFontIndex;

    private float offsetX, offsetY;

    private boolean allowDrag;

    private JPanel mySelf;

    ///////////////////////////////////////////////////////////////////////////

    public FontDisplay(FFont aFont) {
        super();
        myFont = aFont;
        myFontIndex = 0;

        offsetX = 0;
        offsetY = 0;

        allowDrag = true;

        mySelf = this;

        this.addMouseListener(new DisplayMouseListener());
    }

    ///////////////////////////////////////////////////////////////////////////

    public void change(int index) {
        myFontIndex = index;
        this.repaint();
    }

    ///////////////////////////////////////////////////////////////////////////

    public void paint(Graphics g) {
        Graphics2D g2 = createGraphics2D();

        float myWindowWidth = getWidth();
        float myWindowHeight = getHeight();
        float targetWidth = 51.2f;
        float targetHeight = 51.2f;

        g2.translate(offsetX, offsetY);

        float scaleX = myWindowWidth / targetWidth;
        float scaleY = myWindowHeight / targetHeight;

        g2.scale(scaleX, scaleY);

        g2.translate(0.0f, 38.4f);

        Line2D.Float aLine = new Line2D.Float(0, 0, 51.2f, 0);
        g2.setColor(Color.RED);
        g2.draw(aLine);

        if (myFont.getFlag(FFont.FontFlagsHasLayout)) {
            float temp = 0;
            temp = myFont.getFontAscent() / 20.0f;

            aLine = new Line2D.Float(0, temp, 51.2f, temp);
            g2.setColor(Color.GREEN);
            g2.draw(aLine);

            temp = myFont.getFontDescent() / 20.0f;

            aLine = new Line2D.Float(0, temp, 51.2f, temp);
            g2.setColor(Color.YELLOW);
            g2.draw(aLine);

        }

        Vector result = (myFont.getGlyphs())[myFontIndex];

        g2.setColor(Color.BLACK);

        if (myFont.getFormat() == 3) {
            g2.scale(1 / 20.0f, 1 / 20.0f);
        }

        for (int x = 0; x < result.size(); x++) {
            if (!(result.get(x) instanceof AdvancedPath)) {
                continue;
            }
            AdvancedPath myPath = (AdvancedPath) result.get(x);
            GeneralPath path = myPath.getPath();

            g2.fill(path);
        }

        g.drawImage(bimg, 0, 0, this);
    }

    ///////////////////////////////////////////////////////////////////////////

    public Graphics2D createGraphics2D() {
        Graphics2D g2 = null;

        if (bimg == null || bimg.getWidth() != getWidth() || bimg.getHeight() != getHeight()) {
            bimg = (BufferedImage) createImage(getWidth(), getHeight());
        }

        g2 = bimg.createGraphics();

        g2.setBackground(Color.WHITE);

        g2.clearRect(0, 0, getWidth(), getHeight());

        setQuality(true, g2);

        return g2;
    }

    ///////////////////////////////////////////////////////////////////////////

    private void setQuality(boolean quality, Graphics2D g2) {
        if (!quality) {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_OFF);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_SPEED);
        } else {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    private class DisplayMouseListener implements MouseListener {
        int startX;
        int startY;

        public DisplayMouseListener() {
            startX = -1;
            startY = -1;
        }

        public void mouseClicked(MouseEvent e) {
            offsetX = 0;
            offsetY = 0;
            mySelf.repaint();
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void mousePressed(MouseEvent e) {
            if (allowDrag) {
                startX = e.getX();
                startY = e.getY();
            }
        }

        public void mouseReleased(MouseEvent e) {
            if (allowDrag && startX != -1) {
                if (e.getX() > startX) {
                    offsetX += e.getX() - startX;
                } else {
                    offsetX -= startX - e.getX();
                }

                if (e.getY() > startY) {
                    offsetY += e.getY() - startY;
                } else {
                    offsetY -= startY - e.getY();
                }

                mySelf.repaint();
            }
            startX = -1;
        }
    }

}