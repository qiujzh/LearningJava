package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.control.AppControl;
import com.mgatelabs.swftools.support.tools.NerdyFrame;

import javax.swing.*;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

public class GuiFrameMini {
    // Nerdy Frame
    private NerdyFrame myNerdyFrame;
    // My Internal Frame
    private GuiInternal myInternal;
    // Desktop to Hold Internal Frame
    private JDesktopPane jde;
    // Debug Flag, Not Used Here
    private boolean isDebug;
    // Plugins
    private GuiInternal panelPluginSelection;
    private PluginStorage myPlugins;

    public GuiFrameMini(GuiInternal aContent) {
        myInternal = aContent;

        String myTitle = ExploitInfo.NAME + " " + ExploitInfo.MAJOR + "." + ExploitInfo.MINOR + " " + ExploitInfo.NOTE;

        myNerdyFrame = new NerdyFrame(myTitle + " - M-Gate Labs - http://www.MGateLabs.com", 800, 600, true);
        myNerdyFrame.setAutoCenter(true);
        myNerdyFrame.getFrame().setIconImage(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/images/icon.png")).getImage());

        this.isDebug = AppControl.getInfo().getDebug();
        if (isDebug) {
            System.out.println("Exploit Mini Frame: Active");
        }

        myNerdyFrame.setContent(buildCoreGui(aContent));

        try {
            aContent.setMaximum(true);
        } catch (Exception e) {
            System.out.println("Could Not Mamimum: " + e);
        }
    }

    private JComponent buildCoreGui(GuiInternal aContent) {
        jde = new JDesktopPane();
        jde.setDragMode(jde.OUTLINE_DRAG_MODE);

        jde.add(aContent);

        panelPluginSelection = new GuiPluginDialog(myNerdyFrame.getFrame());
        panelPluginSelection.addInternalFrameListener(new JInternalFrameListener());

        jde.add(panelPluginSelection);

        setupPlugins();

        return jde;
    }

    private void setupPlugins() {
        panelPluginSelection.show();
        try {
            panelPluginSelection.setMaximum(true);
        } catch (Exception e) {
            System.out.println("Could Not Mamimum: " + e);
        }
    }

    private class JInternalFrameListener implements InternalFrameListener {
        public void internalFrameActivated(InternalFrameEvent e) {
        }

        public void internalFrameClosed(InternalFrameEvent e) {
            if (e.getInternalFrame() == panelPluginSelection) {
                if (((GuiPluginDialog) panelPluginSelection).ready()) {
                    myPlugins = ((GuiPluginDialog) panelPluginSelection).getPlugins();

                    //System.out.println("Internal: " + myInternal);

                    if (myInternal instanceof BlockEditDialog) {
                        BlockEditDialog bed = (BlockEditDialog) myInternal;
                        //System.out.println("Plugin Count: " + myPlugins.myPlugins.size());
                        bed.updateMenuWithPlugins(myPlugins.myPlugins);
                    }

                    myInternal.show();

                    jde.remove(panelPluginSelection);

                    panelPluginSelection = null;
                } else {
                    myNerdyFrame.close();
                }
            }
        }

        public void internalFrameClosing(InternalFrameEvent e) {
        }

        public void internalFrameDeactivated(InternalFrameEvent e) {
        }

        public void internalFrameDeiconified(InternalFrameEvent e) {
        }

        public void internalFrameIconified(InternalFrameEvent e) {
        }

        public void internalFrameOpened(InternalFrameEvent e) {
        }

    }
}