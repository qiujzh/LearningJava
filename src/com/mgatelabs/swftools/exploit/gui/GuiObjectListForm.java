package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.support.swf.objects.*;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import java.util.Vector;

public class GuiObjectListForm {

    private JTree myTree;
    private JScrollPane treeView;
    private DefaultMutableTreeNode nodeRoot;//, nodeShape, nodeBitmap, nodeSound, nodeSprite, nodeFont;

    ///////////////////////////////////////////////////////////////////////////

    private DefaultMutableTreeNode[] nodeArray;

    public static final int SHAPE = 0;
    public static final int SPRITE = 1;
    public static final int BITMAP = 2;
    public static final int SOUND = 3;
    public static final int FONT = 4;

    ///////////////////////////////////////////////////////////////////////////

    public GuiObjectListForm(JPanel master) {
        master.setLayout(new BoxLayout(master, BoxLayout.Y_AXIS));
        setup(master);
    }

    ///////////////////////////////////////////////////////////////////////////

    public DefaultMutableTreeNode getNode(int index) {
        return nodeArray[index];
    }

    ///////////////////////////////////////////////////////////////////////////

    public JTree getTree() {
        return myTree;
    }

    ///////////////////////////////////////////////////////////////////////////

    private void setup(JPanel master) {
        createNodes();

        myTree = new JTree(nodeRoot);
        myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        //myTree.addMouseListener(mml);
        treeView = new JScrollPane(myTree);

        master.add(treeView);
    }

    ///////////////////////////////////////////////////////////////////////////

    public void createNodes() {
        nodeRoot = new DefaultMutableTreeNode("SWF Contents");

        nodeArray = new DefaultMutableTreeNode[5];

        nodeArray[SHAPE] = new DefaultMutableTreeNode("Shapes");
        nodeArray[SPRITE] = new DefaultMutableTreeNode("Movies");
        nodeArray[BITMAP] = new DefaultMutableTreeNode("Bitmaps");
        nodeArray[SOUND] = new DefaultMutableTreeNode("Sounds");
        nodeArray[FONT] = new DefaultMutableTreeNode("Fonts");

        nodeRoot.add(nodeArray[SHAPE]);
        nodeRoot.add(nodeArray[SPRITE]);
        nodeRoot.add(nodeArray[BITMAP]);
        nodeRoot.add(nodeArray[SOUND]);
        nodeRoot.add(nodeArray[FONT]);
    }

    ///////////////////////////////////////////////////////////////////////////

    public void clean(boolean skip) {
        for (int x = 0; x < 5; x++) {
            nodeArray[x].removeAllChildren();
        }

        if (!skip)
            refresh();
    }

    ///////////////////////////////////////////////////////////////////////////

    private void refresh() {
        DefaultTreeModel myTreeModel = (DefaultTreeModel) myTree.getModel();
        myTreeModel.setRoot(nodeRoot);
        myTreeModel.reload();
    }

    ///////////////////////////////////////////////////////////////////////////

    public void update(FMovie aMovie) {
        Vector myObjects = aMovie.getObjectVector();

        for (int x = 0; x < myObjects.size(); x++) {
            Object o = myObjects.get(x);

            if (o instanceof FShape) {
                FShape aShape = (FShape) o;
                nodeArray[SHAPE].add(new DefaultMutableTreeNode(new GuiTreeItem(aShape, GuiTreeItem.SHAPE, "Shape ID: " + aShape.getID())));
            } else if (o instanceof FSprite) {
                FSprite aSprite = (FSprite) o;
                nodeArray[SPRITE].add(new DefaultMutableTreeNode(new GuiTreeItem(aSprite, GuiTreeItem.SPRITE, "Sprite ID: " + aSprite.getID() + ", " + aSprite.getFrameCount())));
            } else if (o instanceof FMorph) {
                FMorph aMorph = (FMorph) o;
                nodeArray[SHAPE].add(new DefaultMutableTreeNode(new GuiTreeItem(aMorph, GuiTreeItem.MORPH, "Morph ID: " + aMorph.getID())));
            } else if (o instanceof FBitmap) {
                FBitmap aBitmap = (FBitmap) o;
                nodeArray[BITMAP].add(new DefaultMutableTreeNode(new GuiTreeItem(aBitmap, GuiTreeItem.BITMAP, "Bitmap(" + aBitmap.getVersion() + ") ID: " + aBitmap.getID())));
            } else if (o instanceof FLossless) {
                FLossless aBitmap = (FLossless) o;
                nodeArray[BITMAP].add(new DefaultMutableTreeNode(new GuiTreeItem(aBitmap, GuiTreeItem.BITMAP, "Lossless(" + aBitmap.getVersion() + ") ID: " + aBitmap.getID())));
            } else if (o instanceof FSound) {
                FSound aSound = (FSound) o;
                nodeArray[SOUND].add(new DefaultMutableTreeNode(new GuiTreeItem(aSound, GuiTreeItem.SOUND, "Sound ID: " + aSound.getID() + " " + aSound.getFormatString())));
            } else if (o instanceof FFont) {
                FFont aFont = (FFont) o;
                nodeArray[FONT].add(new DefaultMutableTreeNode(new GuiTreeItem(aFont, GuiTreeItem.FONT, aFont.toString())));
            }
        }

        nodeArray[SPRITE].add(new DefaultMutableTreeNode(new GuiTreeItem(aMovie, GuiTreeItem.SPRITE, "Movie")));

        refresh();
    }


}