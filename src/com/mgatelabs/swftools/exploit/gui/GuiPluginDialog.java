package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.control.AppControl;
import com.mgatelabs.swftools.exploit.j2d.DataCategory;
import com.mgatelabs.swftools.exploit.j2d.J2DRenderSelectionPanel;
import com.mgatelabs.swftools.support.base.Base16;
import com.mgatelabs.swftools.support.filters.SimpleFileFilter;
import com.mgatelabs.swftools.support.loaders.BasicClassLoader;
import com.mgatelabs.swftools.support.plugins.Plugin;
import com.mgatelabs.swftools.support.plugins.PluginInfo;
import com.mgatelabs.swftools.support.tools.BrowserControl;
import com.mgatelabs.swftools.support.tools.FolderHelper;
import com.mgatelabs.swftools.support.tools.JPanelMaker;
import com.mgatelabs.swftools.support.xml.XMLHash;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileFilter;
import java.security.MessageDigest;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

// The All Mights Plugin Screen

public class GuiPluginDialog extends GuiInternal {

    //Variables
    private GuiPluginDialog mySelf;
    private PluginStorage myPlugins;

    private JButton bypass, buttonWebsite;

    private J2DRenderSelectionPanel mySelectionPanel;

    private boolean ready;

    private static final int[] categories = {1, 3};

    private boolean isDebug;

    // Constructor
    public GuiPluginDialog(JFrame master) {
        super("Startup Configuration", false, false, false, false);

        this.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/flash.png")));

        ready = false;
        mySelf = this;
        this.isDebug = AppControl.getInfo().getDebug();
        if (isDebug) {
            System.out.println("Plugin Dialog: Active");
        }

        myPlugins = new PluginStorage();

        buildControls();

        setupPluginLists();

        this.getContentPane().add(buildGui());
        this.pack();
        this.show();
    }

    // Get the Plugins
    public PluginStorage getPlugins() {
        return myPlugins;
    }

    public boolean ready() {
        return ready;
    }

    // Load Plugin Info
    public void setupPluginLists() {
        mySelectionPanel = new J2DRenderSelectionPanel();

        mySelectionPanel.addCategory("Conversion", 1, 1);

        mySelectionPanel.addCategory("Block Editor", 3, -1);

        File directory = new File("plugins/");

        FileFilter ff = new SimpleFileFilter(".xml");

        File[] files = directory.listFiles(ff);

        for (int x = 0; x < files.length; x++) {
            PluginInfo pi = new PluginInfo(files[x], false);
            mySelectionPanel.addToCategory(pi);
        }

        ////C:\Users\Michael Fuller\Work\SWFTools-Core\src\com\mgatelabs\swftools\support\plugins\BSetBackGroundColor.xml

        String[] internal = new String[]{
                "AdvancedConverter.xml",
                "BAddHidden.xml",
                "BasicConverter.xml",
                "BEditID.xml",
                "BEditMetaData.xml",

                "BEditPlaceObject.xml",
                "BInsertEnd.xml",
                "BInsertShow.xml",

                "Block_EditTest.xml",
                "BSetBackGroundColor.xml"
        };

        String path = "com.mgatelabs.swftools.support.plugins.";
        String location = "/com/mgatelabs/swftools/support/plugins/";

        for (String xmlName : internal) {
            PluginInfo pi = new PluginInfo(path, this.getClass().getResourceAsStream(location + xmlName), true);
            mySelectionPanel.addToCategory(pi);
        }

        load();
    }

    // Controls ///////////////////////////////////////////////////////////////

    private void buildControls() {

        bypass = new JButton("Start Program", new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/antimoney.png")));


        buttonWebsite = new JButton("M-Gate Labs");
        buttonWebsite.setToolTipText("Click here to visit M-Gate Labs.");

        ExploitActionListener myExploitActionListener = new ExploitActionListener();

        bypass.addActionListener(myExploitActionListener);
        buttonWebsite.addActionListener(myExploitActionListener);
    }

    // Build the Gui //////////////////////////////////////////////////////////

    public JPanel buildGui() {
        JPanel master = JPanelMaker.XPanel(640, 480);
        master.setBackground(Color.WHITE);

        master.add(buildLeftPanel());
        master.add(buildRightPanel());

        return master;
    }

    public JPanel buildLeftPanel() {
        JPanel master = new JPanel();
        JPanelMaker.setPanelWidth(master, 250, 480);
        master.setBackground(Color.WHITE);
        master.add(buildImagePanel());
        master.add(buildLoginPanel());

        return master;
    }

    private JPanel buildImagePanel() {
        JPanel master = JPanelMaker.YPanel(240, 100);
        master.setBackground(Color.WHITE);

        master.add(new JLabel(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/images/startup.png"))));

        return master;
    }

    private JPanel buildLoginPanel() {
        JPanel master = JPanelMaker.YPanel(240, 175);
        master.setBackground(Color.WHITE);

        // Button Panel 1
        JPanel buttonPanel = JPanelMaker.XPanel(240, 25);
        buttonPanel.setBackground(Color.WHITE);

        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(Box.createHorizontalStrut(4));
        buttonPanel.add(bypass);
        buttonPanel.add(Box.createHorizontalGlue());
        buttonPanel.add(Box.createHorizontalStrut(10));

        master.add(Box.createVerticalStrut(10));
        master.add(buttonPanel);

        // Button Panel 2
        buttonPanel = JPanelMaker.XPanel(240, 25);
        buttonPanel.setBackground(Color.WHITE);

        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(buttonWebsite);
        buttonPanel.add(Box.createHorizontalGlue());
        buttonPanel.add(Box.createHorizontalStrut(10));

        master.add(Box.createVerticalStrut(10));
        master.add(buttonPanel);

        return master;
    }

    public JPanel buildRightPanel() {
        JPanel master = JPanelMaker.YPanel(640 - 250, 480);

        master.add(mySelectionPanel);

        return master;
    }

    public JPanel buildLayoutPanel(Component a, Component b, int fullwidth, int widthpart, int height) {
        return buildLayoutPanel(a, b, fullwidth, widthpart, height, null);
    }

    public JPanel buildLayoutPanel(Component a, Component b, int fullwidth, int widthpart, int height, Color back) {
        JPanel master = JPanelMaker.XPanel(fullwidth, height); // 630
        JPanel p1 = JPanelMaker.XPanel(widthpart, height);
        JPanel p2 = JPanelMaker.XPanel(fullwidth - widthpart, height);

        if (back != null) {
            master.setBackground(back);
            p1.setBackground(back);
            p2.setBackground(back);
        }

        p1.add(a);

        p2.add(b);
        p2.add(Box.createHorizontalStrut(5));

        master.add(p1);
        master.add(p2);

        master.add(Box.createHorizontalStrut(5));

        return master;
    }

    private void loginProcess(boolean full) {
        Hashtable myHash = null;

        if (isDebug) {
            System.out.println("Login: Starting");
        }

        if (!mySelectionPanel.ready()) {
            JOptionPane.showMessageDialog(mySelf, "A required plugin has not been selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isDebug) {
            System.out.println("Login: Skipping");
        }


        if (loadPlugins(myHash)) {
            ready = true;
            save();
            mySelf.dispose();
        }
    }

    // Plugin Loader //////////////////////////////////////////////////////////

    private boolean loadPlugins(Hashtable hash) {
        try {
            for (int x = 0; x < categories.length; x++) {

                DataCategory dc = mySelectionPanel.getCategory(categories[x]); // Conversion

                if (dc.getData().size() == 0) {
                    continue;
                }

                for (int y = 0; y < dc.getData().size(); y++) {
                    PluginInfo pi = (PluginInfo) dc.getData().get(y);
                    Plugin pt = null;

                    if (dc.isSelection(pi.id)) {
                        File target = new File("plugins/" + pi.fileName);

                        if (isDebug) {
                            System.out.println("Loading Plugin: " + target.toString());
                        }

                        if (pi.encrypted == false)

                        {
                            try {
                                // Old Class Loader Code
                                BasicClassLoader bcl = new BasicClassLoader();
                                if (pi.isPackaged()) {
                                    pt = (Plugin) bcl.findPackagedClass(pi.className, pi.className).newInstance();
                                } else {
                                    pt = (Plugin) bcl.findClass("plugins." + pi.className, target).newInstance();
                                }
                            } catch (Exception ert) {
                                JOptionPane.showMessageDialog(mySelf, "Error: Plugin Loader ->" + ert.getMessage() + ": " + ert.getCause(), "Plugin Error", JOptionPane.ERROR_MESSAGE);
                                return false;
                            }

                        }
                    }

                    if (pt != null) {
                        myPlugins.setPlugin(pt, categories[x]);
                    }
                }
            }
            return true;
        } catch (Exception e) {
            System.out.println("\"" + e + "\"");
            return false;
        }
    }

    // Form Data I/O

    private void save() {
        Hashtable myTable = new Hashtable();

        Vector myCategories = mySelectionPanel.getCategories();

        for (int x = 0; x < myCategories.size(); x++) {
            DataCategory dc = (DataCategory) myCategories.get(x);
            for (int y = 0; y < dc.getData().size(); y++) {
                PluginInfo pi = (PluginInfo) dc.getData().get(y);
                if (dc.isSelection(pi.id)) {
                    myTable.put("!" + pi.id, "" + dc.getType());
                }
            }
        }

        myTable.put("ok", "yeah");

        XMLHash myHash = new XMLHash();

        myHash.write(FolderHelper.getAppPath("last.xml"), myTable);
    }

    // Data Loading

    private void load() {
        XMLHash myHash = new XMLHash();
        Hashtable myTable = myHash.read(FolderHelper.getAppPath("last.xml"));

        DataCategory dc = null;//
        // Conversion

        Enumeration eKeys = myTable.keys();

        while (eKeys.hasMoreElements()) {
            String key = (String) eKeys.nextElement();
            if (key.startsWith("!")) // Check for Plugins
            {
                key = key.substring(1);
                // Get Plugin Category
                String cat = (String) myTable.get("!" + key);

                try {
                    int iKey = Integer.parseInt(key);
                    int iCat = Integer.parseInt(cat);

                    // Try to get the Key

                    dc = mySelectionPanel.getCategory(iCat);
                    if (dc != null) {
                        dc.addSelection(iKey);
                    }
                } catch (Exception ex) {
                    System.out.println("load: " + ex);
                }
            }
        }

        if (dc != null) {
            if (myTable.get("1") != null) {
                dc.setupFor(Integer.parseInt((String) myTable.get("1")));
            }
        }

        if (myTable.get("ok") == null) {
            JOptionPane.showMessageDialog(mySelf, "Welcome to Flash Exploit.  To start using\nthe program you must select a conversion plugin.", "Welcome", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Encryption Functions

    public String getMD5Hash(String value) {
        String result = "";

        try {
            MessageDigest md = MessageDigest.getInstance("MD5");

            md.update(value.getBytes());
            byte[] toChapter1Digest = md.digest();

            result = getString(toChapter1Digest);

        } catch (Exception cnse) {
            System.out.println(cnse);
        }

        return result;
    }

    private String getString(byte[] bytes) {

        Base16 b16 = new Base16();

        bytes = b16.encode(bytes);

        return new String(bytes);

    }

    // Listen for button clicks ///////////////////////////////////////////////

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            //System.out.println("click");
            if (e.getSource() == bypass) {
                loginProcess(false);
            } else if (e.getSource() == buttonWebsite) {
                BrowserControl.displayURL("http://www.MGateLabs.com");
            }
            // else if (e.getSource() == buttonBlock)
            // 	{
            //
            // 	}
        }
    }


}