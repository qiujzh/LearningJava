/*
    Copyright M-Gate Labs 2007
*/

/**
 <p>
 <b>GUI Frame</b>
 </p>
 <p>
 This is a big class that holds all the gui information for the main window.
 </p>
 */

package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.control.AppControl;
import com.mgatelabs.swftools.exploit.conversion.Converter;
import com.mgatelabs.swftools.exploit.conversion.MorphConverter;
import com.mgatelabs.swftools.exploit.io.ExportableObject;
import com.mgatelabs.swftools.support.filters.CommonFileFilter;
import com.mgatelabs.swftools.support.swf.io.FlashCompression;
import com.mgatelabs.swftools.support.swf.io.FlashFilter;
import com.mgatelabs.swftools.support.swf.io.FlashReader;
import com.mgatelabs.swftools.support.swf.objects.*;
import com.mgatelabs.swftools.support.swf.tags.PlaceObject;
import com.mgatelabs.swftools.support.swf.tags.Tag;
import com.mgatelabs.swftools.support.tools.BrowserControl;
import com.mgatelabs.swftools.support.tools.JPanelMaker;
import com.mgatelabs.swftools.support.tools.NerdyFrame;

import javax.swing.*;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Vector;

public class GuiFrame {
    // Gui Top Level Containers
    private NerdyFrame myNerdyFrame;

    // Gui Panels and Such

    //    private GuiTreePanel myExploitTreePanel;
    private GuiObjectList myObjectList;

    private Vector myChangeListeners;

    private AExploitTreeListener myExploitTreeListener;
    private ExploitActionListener myExploitActionListener;
    private JInternalFrameListener myJInternalFrameListener;

    //JSplitPane myJSplitPane, myDisplayJSplitPane;

    private JFileChooser myJFileChooser;
    private JFileChooserHandler myFileMon;

    private GuiDisplay myMovieDisplay;
    private GuiControl myExploitMovieControlPanel;
    private GuiDisplayControls myExploitMovieDisplayControls;
    private GuiDisplayList myExploitDisplayListPanel;
    private GuiDisplayDetails myExploitDisplayListItemPanel;
    private JDesktopPane jde;

    private GuiInternal displayInternalPanel;
    private GuiInternal treeInternalPanel;
    private GuiInternal controlInternalPanel;
    private GuiInternal displayListInternalPanel;
    private GuiInternal panelPluginSelection;
    //private GuiInternal panelBlockEditor;
    private GuiInternal panelFontViewer;

    // Menu Objects
    private JMenuBar myMenuBar;

    private JMenuItem menuFileOpen;
    private JMenuItem menuFileClose;
    //private JMenuItem  menuFileOpenBlock;
    private JMenuItem menuFileDecompress;
    private JMenuItem menuFileDecompressSvgz;
    private JMenuItem menuFileExit;

    private JMenuItem menuExportSVG;
    private JMenuItem menuExportSVGZ;
    private JMenuItem menuExportSWF;
    private JMenuItem menuExportSVGAnimated;
    private JMenuItem menuExportSWFAnimated;

    private JCheckBoxMenuItem menuExportPrettyXML;
    private JCheckBoxMenuItem menuExportZeroPoint;
    private JCheckBoxMenuItem menuOptionAutoShow;

    private JCheckBoxMenuItem menuReadShapes;
    private JCheckBoxMenuItem menuReadSounds;
    private JCheckBoxMenuItem menuReadFonts;
    private JCheckBoxMenuItem menuReadBitmaps;
    private JCheckBoxMenuItem menuReadQuickBitmaps;
    private JCheckBoxMenuItem menuReadPreview;

    private JMenuItem menuHelpDonate;
    private JMenuItem menuHelpAbout;

    private JMenu menuFile;
    private JMenu menuExport;
    private JMenu menuOption;
    private JMenu menuHelp;
    private JMenu menuRam;

    private JMenuItem menuRamClean;
    private JMenuItem menuRamUpdate;

    private boolean isMovieOpen;

    private String myTitle;

    private PluginStorage myPlugins;

    private boolean isDebug;

    // Functions

    public GuiFrame() {
        myTitle = ExploitInfo.NAME + " " + ExploitInfo.MAJOR + "." + ExploitInfo.MINOR + " " + ExploitInfo.NOTE;

        myNerdyFrame = new NerdyFrame(myTitle + " - M-Gate Labs - http://www.mgatelabs.com", 800, 600, true);
        myNerdyFrame.setAutoCenter(true);
        myNerdyFrame.getFrame().setIconImage(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/images/icon.png")).getImage());

        this.isDebug = AppControl.getInfo().getDebug();
        if (isDebug) {
            System.out.println("Exploit Frame: Active");
        }

        isMovieOpen = false;

        setupComponents();

        myNerdyFrame.setContent(buildCoreGui());

        panelVisibility(false);

        setupPlugins();

        //panelVisibility(true);
    }

    private void panelVisibility(boolean show) {
        if (show) {
            displayInternalPanel.show();
            treeInternalPanel.show();
            controlInternalPanel.show();
            displayListInternalPanel.show();
            //displayListItemPanel.show();
        } else {
            displayInternalPanel.hide();
            treeInternalPanel.hide();
            controlInternalPanel.hide();
            displayListInternalPanel.hide();
            //displayListItemPanel.hide();
        }

        menuFile.setEnabled(show);
        menuExport.setEnabled(show);
        menuOption.setEnabled(show);
        //menuHelp.setEnabled(show);
        menuRam.setEnabled(show);
    }

    private void setupPlugins() {
        panelPluginSelection.show();
        try {
            panelPluginSelection.setMaximum(true);
        } catch (Exception e) {
            System.out.println("Could Not Mamimum: " + e);
        }
    }

    private void DisplaySWF(FMovie aMovie) {
        FRect aRect = aMovie.getRect();
        isMovieOpen = true;
        myMovieDisplay.changeMovieDimensions(aRect.xmax / 20.0f, aRect.ymax / 20.0f);


        for (int x = 0; x < myChangeListeners.size(); x++) {
            ExploitChangeListener ecl = (ExploitChangeListener) myChangeListeners.get(x);
            ecl.movieOpen(aMovie);
        }

        // Check to see if the mvie should autoplay
        if (menuOptionAutoShow.getState() == true) {
            FMovieData aMovieData = new FMovieData(aMovie);
            myExploitMovieControlPanel.setMovie(aMovieData);
        }
    }

    private void movieClose() {
        cleanUp(true);
    }

   	/*
       private void setupBlockEditor()
      {
         panelVisibility(false);
      	
         panelBlockEditor = new BlockEditDialog(myNerdyFrame.getFrame());
         panelBlockEditor.addInternalFrameListener(myJInternalFrameListener);
         
         jde.add(panelBlockEditor);
      	
         panelBlockEditor.show();
         try
         {
            panelBlockEditor.setMaximum(true);
         }
             catch (Exception e)
            {
               System.out.println("Could Not Mamimum: " + e);
            }
      }
   	*/

    private void setupFontEditor(FFont aFont) {
        if (aFont.getGlyphs().length == 0) {
            return;
        }

        panelVisibility(false);

        panelFontViewer = new FontViewer(myNerdyFrame.getFrame(), aFont);
        panelFontViewer.addInternalFrameListener(myJInternalFrameListener);

        jde.add(panelFontViewer);

        panelFontViewer.show();
        try {
            panelFontViewer.setMaximum(true);
        } catch (Exception e) {
            System.out.println("Could Not Mamimum: " + e);
        }
    }

    private void setupComponents() {
        myJFileChooser = new JFileChooser(new File("."));
        myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));

        myFileMon = new JFileChooserHandler(myNerdyFrame.getFrame(), myJFileChooser, ".swf", "Adobe Flash File");
    }

    // Build the Basic Gui

    private JComponent buildCoreGui() {
        myChangeListeners = new Vector();

        jde = new JDesktopPane();
        jde.setDragMode(jde.OUTLINE_DRAG_MODE);

        // Setup Listners
        myExploitActionListener = new ExploitActionListener();
        myExploitTreeListener = new AExploitTreeListener();

        myJInternalFrameListener = new JInternalFrameListener();

        //Setup Menus
        buildMenus();

        //Setup Tree
        myObjectList = new GuiObjectList();
        myObjectList.addListener(myExploitTreeListener);
        myChangeListeners.add(myObjectList.getListener());
        treeInternalPanel = new GuiInternal(myObjectList, "SWF Data", 200, 530, true, true);
        treeInternalPanel.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/icon_objects.png")));

        //Setup Panel
        myMovieDisplay = new GuiDisplay();

        myExploitMovieDisplayControls = new GuiDisplayControls(myMovieDisplay);
        JPanel displayHolder = JPanelMaker.YPanel(0, 0);
        displayHolder.add(myMovieDisplay);
        displayHolder.add(myExploitMovieDisplayControls);

        panelPluginSelection = new GuiPluginDialog(myNerdyFrame.getFrame());
        panelPluginSelection.addInternalFrameListener(myJInternalFrameListener);
        //panelBlockEditor = null;

        myExploitDisplayListPanel = new GuiDisplayList();
        myExploitDisplayListPanel.addExploitTreeListener(myExploitTreeListener);
        myExploitMovieControlPanel = new GuiControl(myMovieDisplay, myExploitDisplayListPanel);
        myChangeListeners.add(myExploitMovieControlPanel.getListener());

        //displayListItemPanel = new GuiInternal(myExploitDisplayListItemPanel, "Item Information", 200, 100, true, true);
        displayListInternalPanel = new GuiInternal(myExploitDisplayListPanel, "Display List", 200, 530, true, true);
        displayListInternalPanel.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/icon_list.png")));
        displayInternalPanel = new GuiInternal(displayHolder, "Preview", 360, 280, true, false);
        displayInternalPanel.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/icon_display.png")));
        controlInternalPanel = new GuiInternal(myExploitMovieControlPanel, "Controls", 280, 96, false, false);
        controlInternalPanel.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/icon_control.png")));

        jde.add(panelPluginSelection);
        jde.add(treeInternalPanel);
        jde.add(controlInternalPanel);
        jde.add(displayInternalPanel);
        jde.add(displayListInternalPanel);
        //jde.add(displayListItemPanel);

        //Tree Display
        treeInternalPanel.setIconifiable(true);
        // Movie Display
        displayInternalPanel.setLocation(430, 0);
        displayInternalPanel.setMaximizable(true);
        // Control Panel
        controlInternalPanel.setLocation(500, 440);
        controlInternalPanel.setLayer(JLayeredPane.POPUP_LAYER);
        // Display List
        displayListInternalPanel.setLocation(200, 0);
        displayListInternalPanel.setIconifiable(true);
        // Display Item
        //displayListItemPanel.setLocation(500,320);
        //displayListItemPanel.setIconifiable(true);

        treeInternalPanel.show();
        controlInternalPanel.show();
        displayInternalPanel.show();
        displayListInternalPanel.show();
        //displayListItemPanel.show();
        return jde;
    }

    //Setup Menus

    private void buildMenus() {
        //Setup Top Level
        myMenuBar = new JMenuBar();

        menuFile = new JMenu("File");
        menuExport = new JMenu("Export");
        menuOption = new JMenu("Options");
        menuHelp = new JMenu("Help");
        menuRam = new JMenu("Ram");
        updateRamStatus();

        myMenuBar.add(menuFile);
        myMenuBar.add(menuExport);
        myMenuBar.add(menuOption);
        myMenuBar.add(menuHelp);
        myMenuBar.add(menuRam);

        //Setup File Menu

        menuFileOpen = new JMenuItem("Open");
        menuFileOpen.setToolTipText("Open a Flash Move");
        //menuFileOpenBlock = new JMenuItem("Block Editor");
        //menuFileOpenBlock.setToolTipText("Open the Block Editor, Also Closes the Open Movie");
        menuFileClose = new JMenuItem("Close / Super Clean");
        menuFileClose.setToolTipText("Closes the Current Flash Movie, Trys to Invoke Garbage Cleanup");
        menuFileDecompress = new JMenuItem("Decompress SWF");
        menuFileDecompress.setToolTipText("Decompress a SWF File to Uncompressed SWF");
        menuFileDecompressSvgz = new JMenuItem("Decompress SVGZ");
        menuFileDecompressSvgz.setToolTipText("Decompress a SVGz file to SVG");
        menuFileExit = new JMenuItem("Quit");
        menuFileExit.setToolTipText("Exit Flash Exploit, Why, Arn't you having fun?");

        menuFileOpen.addActionListener(myExploitActionListener);
        //menuFileOpenBlock.addActionListener(myExploitActionListener);
        menuFileClose.addActionListener(myExploitActionListener);
        menuFileDecompress.addActionListener(myExploitActionListener);
        menuFileDecompressSvgz.addActionListener(myExploitActionListener);
        menuFileExit.addActionListener(myExploitActionListener);

        menuFile.add(menuFileOpen);
        menuFile.add(menuFileClose);
        menuFile.addSeparator();
        //menuFile.add(menuFileOpenBlock);
        menuFile.add(menuFileDecompress);
        menuFile.add(menuFileDecompressSvgz);
        menuFile.addSeparator();
        menuFile.add(menuFileExit);

        // Setup Export Menu

        menuExportSVG = new JMenuItem("to SVG (Frame)");
        menuExportSVG.setToolTipText("Export Current Frame to SVG Format");
        menuExportSVGZ = new JMenuItem("to SVGz (Frame)");
        menuExportSVGZ.setToolTipText("Export Current Frame to Compressed SVG Format");
        menuExportSWF = new JMenuItem("to SWF (Frame)");
        menuExportSWF.setToolTipText("Not Supported");
        menuExportSVGAnimated = new JMenuItem("to SVG (Movie)");
        menuExportSVGAnimated.setToolTipText("Not Supported");
        menuExportSWFAnimated = new JMenuItem("to SWF (Movie)");
        menuExportSWFAnimated.setToolTipText("Not Supported");

        menuExportSWF.setEnabled(false);
        menuExportSVGAnimated.setEnabled(false);
        menuExportSWFAnimated.setEnabled(false);

        menuExportSVG.addActionListener(myExploitActionListener);
        menuExportSVGZ.addActionListener(myExploitActionListener);

        menuExport.add(menuExportSVG);
        menuExport.add(menuExportSVGZ);
        menuExport.add(menuExportSWF);
        menuExport.addSeparator();
        menuExport.add(menuExportSVGAnimated);
        menuExport.add(menuExportSWFAnimated);
        // Option Menu

        menuExportPrettyXML = new JCheckBoxMenuItem("Pretty XML Output", true);
        menuExportPrettyXML.setToolTipText("Check this For Tabbed XML Output.");
        menuExportZeroPoint = new JCheckBoxMenuItem("Add 0,0 Reference Point", false);
        menuExportZeroPoint.setToolTipText("Check this to add an extra shape to help with editing.");
        menuOptionAutoShow = new JCheckBoxMenuItem("Auto Display Movie", true);
        menuOptionAutoShow.setToolTipText("Check this for Flash Exploit To Auto Display the Movie's First Frame.");

        menuReadShapes = new JCheckBoxMenuItem("Process Shapes", true);
        menuReadShapes.setToolTipText("Check this to Process Shape/Morph Tags");
        menuReadSounds = new JCheckBoxMenuItem("Process Sounds", false);
        menuReadSounds.setToolTipText("Check this to Process Sound Tags");
        menuReadFonts = new JCheckBoxMenuItem("Process Fonts", true);
        menuReadFonts.setToolTipText("Check this to Process Font Tags");
        menuReadBitmaps = new JCheckBoxMenuItem("Process Bitmaps", true);
        menuReadBitmaps.setToolTipText("Check this to Process Bitmap/Lossless Tags");
        menuReadQuickBitmaps = new JCheckBoxMenuItem("Quick Bitmaps", false);
        menuReadQuickBitmaps.setToolTipText("Check this to discard internal Bitmap Data Arrays. Preview=OK, Export=Poor");
        menuReadPreview = new JCheckBoxMenuItem("Browser Preview", true);
        menuReadPreview.setToolTipText("Check this to view Bitmaps/Lossless Images in your Web Browser");

        menuOption.add(menuOptionAutoShow);
        menuOption.addSeparator();
        menuOption.add(menuExportPrettyXML);
        menuOption.add(menuExportZeroPoint);
        menuOption.addSeparator();
        menuOption.add(menuReadShapes);
        menuOption.add(menuReadSounds);
        menuOption.add(menuReadFonts);
        menuOption.add(menuReadBitmaps);
        menuOption.addSeparator();
        menuOption.add(menuReadQuickBitmaps);
        menuOption.add(menuReadPreview);

        //Setup Help Menu


        menuHelpDonate = new JMenuItem("Donate");
        menuHelpDonate.setToolTipText("Give Flash Exploit Money, Come On, The Programmers live off cheap raman, not even the good stuff!");
        menuHelpDonate.addActionListener(myExploitActionListener);
        menuHelpAbout = new JMenuItem("About");
        menuHelpAbout.setToolTipText("View Information About Flash Exploit");
        menuHelpAbout.addActionListener(myExploitActionListener);

        menuHelp.addSeparator();
        menuHelp.add(menuHelpDonate);
        menuHelp.addSeparator();
        menuHelp.add(menuHelpAbout);

        // Menu Ram
        menuRamClean = new JMenuItem("Clean");
        menuRamClean.setToolTipText("Try to Clean the Ram, Scrub, Scrub, Scrub!");
        menuRamClean.addActionListener(myExploitActionListener);

        menuRamUpdate = new JMenuItem("Update");
        menuRamUpdate.setToolTipText("Update the Ram Counts");
        menuRamUpdate.addActionListener(myExploitActionListener);

        menuRam.add(menuRamUpdate);
        menuRam.addSeparator();
        menuRam.add(menuRamClean);

        //Setup with Panel
        myNerdyFrame.setMenu(myMenuBar);
    }

    // Open a Flash Flash File

    private boolean LoadSWF(File aFile) {
        try {
            // Get the Reader
            FlashFilter aFilter = new FlashFilter();

            aFilter.setFilter(FlashFilter.SHAPE, menuReadShapes.getState());
            aFilter.setFilter(FlashFilter.SOUND, menuReadSounds.getState());
            aFilter.setFilter(FlashFilter.FONT, menuReadFonts.getState());
            aFilter.setFilter(FlashFilter.BITMAP, menuReadBitmaps.getState());
            aFilter.setFilter(FlashFilter.BITMAP_DISCARD, menuReadQuickBitmaps.getState());

            FlashReader myReader = new FlashReader(aFile, aFilter);
            FMovie myFlashObject = null;
            if (myReader.ready()) {
                myNerdyFrame.getFrame().hide();

                GuiLoadPopup glp = new GuiLoadPopup(myNerdyFrame.getFrame(), myReader);

                myFlashObject = glp.getMovie();

                //myFlashObject = myReader.parse();
            }
            myReader.close();

            if (myFlashObject == null) {
                myNerdyFrame.getFrame().show();
                JOptionPane.showMessageDialog(myNerdyFrame.getFrame(), myReader.getError(), "Error", JOptionPane.ERROR_MESSAGE);
                movieClose();
                return false;
            }

            myReader = null;

            // Hide Main Window
            myNerdyFrame.getFrame().hide();

            // Get a Conversion Plugin
            Converter aConverter = (Converter) myPlugins.getPluginByType(1);

            // Convert
            if (myFlashObject.getObjectVector().size() > 0) {
                GuiConvertPopup aDiag = new GuiConvertPopup(myNerdyFrame.getFrame(), myFlashObject, aConverter);
                aDiag = null;
            }

            if (myFlashObject.getObjectVector().size() > 0 && myFlashObject.ready()) {
                GuiConvertPopup aDiag = new GuiConvertPopup(myNerdyFrame.getFrame(), myFlashObject, new MorphConverter());
                aDiag = null;
            }

            aConverter = null;

            // Show the frame
            myNerdyFrame.getFrame().show();

            if (myFlashObject.ready()) {
                DisplaySWF(myFlashObject);
                updateRamStatus();
            } else {
                myFlashObject = null;
                movieClose();
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            cleanUp(true);
            JOptionPane.showMessageDialog(myNerdyFrame.getFrame(), "Java has experienced an error, most likely\ndue to running out of ram.\nPlease close this program and run\nit with a higher ram setting." + "\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
            updateRamStatus();
            myNerdyFrame.getFrame().show();
            return false;
        }
    }


    public void cleanUp(boolean close) {
        //myExploitMovieControlPanel.clean(close);

        if (close) {
            for (int x = 0; x < myChangeListeners.size(); x++) {
                ExploitChangeListener ecl = (ExploitChangeListener) myChangeListeners.get(x);
                ecl.movieClose();
            }
            isMovieOpen = false;
        }

        Runtime r = Runtime.getRuntime();
        r.runFinalization();
        r.gc();
        r = null;

        updateRamStatus();
    }

    public void updateRamStatus() {
        Runtime r = Runtime.getRuntime();
        menuRam.setText("Ram: " + ((r.maxMemory() - r.freeMemory()) / 1024) + " KB Free");
        r = null;
    }

    // Action Listeners

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == menuFileOpen) {
                if (isMovieOpen) {
                    isMovieOpen = false;
                    cleanUp(true);
                }

                movieClose();

                //myExploitTreePanel.cleanNodes(false);
                myExploitMovieControlPanel.setObject(null);

                int returnVal = myJFileChooser.showOpenDialog(myNerdyFrame.getFrame());
                if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                    LoadSWF(myJFileChooser.getSelectedFile());
                }
            }
            /*
            else if (e.getSource() == menuFileOpenBlock)
            {
               setupBlockEditor();
            }
            */
            else if (e.getSource() == menuRamClean) {
                updateRamStatus();
            } else if (e.getSource() == menuRamClean) {
                cleanUp(false);
            } else if (e.getSource() == menuFileClose) {
                movieClose();

                myExploitMovieControlPanel.setObject(null);
            } else if (e.getSource() == menuFileDecompressSvgz) {
                File source, destination;

                source = myFileMon.getOpenFile(".svgz", "Compressed SVG");

                if (source != null) {
                    destination = myFileMon.getSaveFile(".svg", "SVG");

                    if (destination != null) {
                        if (!FlashCompression.uncompressSVGZ(source, destination)) {
                            JOptionPane.showMessageDialog(myNerdyFrame.getFrame(), "An error occured, please verify that the file was compressed.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else if (e.getSource() == menuFileDecompress) {
                File source, destination;

                source = myFileMon.getOpenFile();
                if (source != null) { // Were Good
                    destination = myFileMon.getSaveFile();
                    if (destination != null) { // Were Good
                        if (!FlashCompression.uncompressSWF(source, destination)) {
                            JOptionPane.showMessageDialog(myNerdyFrame.getFrame(), "An error occured, please verify that the file was compressed.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else if (e.getSource() == menuFileExit) {
                myNerdyFrame.close();
            } else if (e.getSource() == menuHelpDonate) {
                BrowserControl.displayURL("http://www.3d2toy.com/donate.html");
            } else if (e.getSource() == menuHelpAbout) {
                JOptionPane.showMessageDialog(myNerdyFrame.getFrame(), myTitle + " (" + ExploitInfo.RELEASE + ")\n\nA Product of M-Gate Labs\nWritten By SlashAndBurn\n\nhttp://swf2svg.3D2Toy.com/", "About Flash Exploit", JOptionPane.INFORMATION_MESSAGE);
            } else if (e.getSource() == menuExportSVG || e.getSource() == menuExportSVGZ) {
                ExportableObject exp = new ExportableObject(myJFileChooser, myNerdyFrame.getFrame());

                exp.exportSvg(myExploitMovieControlPanel.getFlashObject(), myExploitMovieControlPanel.getFlashMovieData(), e.getSource() != menuExportSVG, menuExportPrettyXML.getState(), menuExportZeroPoint.getState());
            }
        }
    }

    // Exploit Handlers

    private class AExploitTreeListener implements ExploitTreeListener {
        public void handleObject(Object obj) {

            // Morph Code
            if (obj instanceof FMorph) {
                FMorph aShape = (FMorph) obj;

                FSprite tempSprite = new FSprite(-1, 6553, myExploitMovieControlPanel.getFlashObject());

                Tag placeTag = new Tag(26, 1); // Place Object
                Tag showTag = new Tag(1, 0); // Show Object
                Tag stopTag = new Tag(0, 0); // Stop Object

                PlaceObject p02 = new PlaceObject();
                p02.setPlaceFlagHasCharacter();
                p02.setPlaceFlagHasMatrix();
                p02.setPlaceFlagHasRatio();
                p02.setRatio(0);

                p02.setID(aShape.getID());
                p02.setMatrix(new FMatrix());
                p02.setDepth(1);

                placeTag.myObject = (p02);

                tempSprite.addTag(placeTag);
                tempSprite.addTag(showTag);

                for (int x = 10; x < 65535; x += 10) {
                    Tag updateTag = new Tag(26, 1);
                    p02 = new PlaceObject();
                    p02.setPlaceFlagMove();
                    p02.setPlaceFlagHasRatio();
                    p02.setDepth(1);
                    p02.setRatio(x);
                    updateTag.myObject = (p02);
                    tempSprite.addTag(updateTag);
                    tempSprite.addTag(showTag);
                }

                tempSprite.addTag(stopTag);

                FMovieData newMovie = new FMovieData(tempSprite);

                myExploitMovieControlPanel.setMovie(newMovie);
            }
            // Shape Code
            else if (obj instanceof FShape) {
                FShape aShape = (FShape) obj;

                FSprite tempSprite = new FSprite(-1, 1, myExploitMovieControlPanel.getFlashObject());

                Tag placeTag = new Tag(26, 1); // Place Object
                Tag showTag = new Tag(1, 0); // Show Object
                Tag stopTag = new Tag(0, 0); // Stop Object

                PlaceObject p02 = new PlaceObject();
                p02.setPlaceFlagHasCharacter();
                p02.setPlaceFlagHasMatrix();

                p02.setID(aShape.getID());
                p02.setMatrix(new FMatrix());
                p02.setDepth(1);

                placeTag.myObject = (p02);

                tempSprite.addTag(placeTag);
                tempSprite.addTag(showTag);
                tempSprite.addTag(stopTag);

                FMovieData newMovie = new FMovieData(tempSprite);

                myExploitMovieControlPanel.setMovie(newMovie);
            }
            // Movie Code
            else if (obj instanceof FMovieInterface) {
                FMovieInterface aMovie = (FMovieInterface) obj;
                FMovieData aMovieData = new FMovieData(aMovie);
                myExploitMovieControlPanel.setMovie(aMovieData);
            } else if (obj instanceof FLossless) {
                ExportableObject exp = new ExportableObject(myJFileChooser, myNerdyFrame.getFrame());

                exp.exportLossless(obj, menuReadPreview.getState());
            } else if (obj instanceof FBitmap) {
                ExportableObject exp = new ExportableObject(myJFileChooser, myNerdyFrame.getFrame());

                exp.exportImage(obj, menuReadPreview.getState());
            } else if (obj instanceof FSound) {
                ExportableObject exp = new ExportableObject(myJFileChooser, myNerdyFrame.getFrame());

                exp.exportSound(obj, menuReadPreview.getState());
            } else if (obj instanceof FFont) {
                FFont aFont = (FFont) obj;

                setupFontEditor(aFont);
            } else if (obj instanceof String) {
                String a = (String) obj;
                if (a.equals("MUP")) {
                    myMovieDisplay.repaint();
                }
            }
        }

        public void handleMovieUpdate() {
            myMovieDisplay.repaint();
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    private class JInternalFrameListener implements InternalFrameListener {
        public void internalFrameActivated(InternalFrameEvent e) {
        }

        public void internalFrameClosed(InternalFrameEvent e) {
            if (e.getInternalFrame() == panelPluginSelection) {
                if (((GuiPluginDialog) panelPluginSelection).ready()) {
                    myPlugins = ((GuiPluginDialog) panelPluginSelection).getPlugins();
                    panelVisibility(true);
                }

                jde.remove(panelPluginSelection);

                panelPluginSelection = null;
            }
            /*
            else if (e.getInternalFrame() == panelBlockEditor)
            {
               panelVisibility(true);
               jde.remove(panelBlockEditor);
               panelBlockEditor = null;
            }
            */
            else if (e.getInternalFrame() == panelFontViewer) {
                panelVisibility(true);
                jde.remove(panelFontViewer);
                panelFontViewer = null;
            }
        }

        public void internalFrameClosing(InternalFrameEvent e) {
        }

        public void internalFrameDeactivated(InternalFrameEvent e) {
        }

        public void internalFrameDeiconified(InternalFrameEvent e) {
        }

        public void internalFrameIconified(InternalFrameEvent e) {
        }

        public void internalFrameOpened(InternalFrameEvent e) {
        }

    }

}