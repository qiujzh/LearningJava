package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.conversion.MorphShape;
import com.mgatelabs.swftools.exploit.render.AdvancedPath;
import com.mgatelabs.swftools.exploit.render.Clipper;
import com.mgatelabs.swftools.support.swf.objects.*;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.util.Vector;

public class GuiDisplay extends JPanel {
    private BufferedImage bimg;
    //private Vector myDisplayList;
    private float offsetX;
    private float offsetY;
    private float movieWidth;
    private float movieHeight;
    private Rectangle2D movieRectangle2D;
    private boolean ready;

    private FColor myRGBA;
    private long myStrokeWidth;
    private FMovieData myMovie;
    private float myFps;
    private Color myBackground;
    private Color myForeground;

    private boolean autoSize;
    private boolean allowFill;
    private boolean allowLine;
    private boolean allowGradient;
    private boolean allowDrag;
    private boolean allowQuality;

    private JPanel mySelf;

    private BufferedImage myDefaultImage;

    // Constructor

    public GuiDisplay() {
        mySelf = this;
        myMovie = null;
        ready = false;
        offsetX = 0;
        offsetY = 0;
        movieWidth = 320;
        movieHeight = 240;
        myFps = 1;
        myDefaultImage = null;

        movieRectangle2D = new Rectangle2D.Float(0, 0, 320, 240);
        myBackground = Color.WHITE;
        myForeground = Color.BLACK;

        autoSize = true;
        allowFill = true;
        allowLine = true;
        allowGradient = true;
        allowDrag = false;
        allowQuality = true;

        this.addMouseListener(new DisplayMouseListener());

        try {
            myDefaultImage = ImageIO.read(this.getClass().getResource("/com/mgatelabs/swftools/images/startup.png"));
        } catch (Exception e) {
            return;
        }
    }

    public void clean() {
        myMovie = null;
    }

    public boolean toggleAutoScale() {
        autoSize = !autoSize;
        return autoSize;
    }

    public boolean toggleFill() {
        allowFill = !allowFill;
        return allowFill;
    }

    public boolean toggleLine() {
        allowLine = !allowLine;
        return allowLine;
    }

    public boolean toggleGradient() {
        allowGradient = !allowGradient;
        return allowGradient;
    }

    public boolean toggleDrag() {
        offsetX = 0;
        offsetY = 0;
        allowDrag = !allowDrag;
        return allowDrag;
    }

    public boolean toggleQuality() {
        allowQuality = !allowQuality;
        return allowQuality;
    }

    // Update Information

    public void setBackground(Color aColor) {
        myBackground = aColor;
        myForeground = new Color(255 - aColor.getRed(), 255 - aColor.getGreen(), 255 - aColor.getBlue());
    }

    public void updateMovieSource(FMovieData aMovie) {
        myMovie = aMovie;
        if (myMovie != null) {
            if (myMovie.getBackgroundColor() != null) {
                setBackground(myMovie.getBackgroundColor());
            }
        } else {
            // Null Movie, Default Renderer
            setBackground(Color.WHITE);
        }
        repaint();
    }

    // Change Movie Dimensions

    public void changeMovieDimensions(float w, float h) {
        movieWidth = w;
        movieHeight = h;
        movieRectangle2D.setRect(0, 0, movieWidth, movieHeight);
    }

    public void updateMovieFps(float speed) {
        myFps = speed;
    }

    public boolean ready() {
        return ready;
    }

    public void update() {
        if (ready) {
            ready = false;
            repaint();
        }
    }

    // Create A Graphics Object

    public Graphics2D createGraphics2D() {
        Graphics2D g2 = null;

        if (bimg == null || bimg.getWidth() != getWidth() || bimg.getHeight() != getHeight()) {
            bimg = (BufferedImage) createImage(getWidth(), getHeight());
        }

        g2 = bimg.createGraphics();

        g2.setBackground(myBackground);

        g2.clearRect(0, 0, getWidth(), getHeight());


        setQuality(allowQuality, g2);

        return g2;
    }

    // Set Graphic Quality

    private void setQuality(boolean quality, Graphics2D g2) {
        if (!quality) {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_OFF);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_SPEED);
        } else {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
        }
    }

    // Update My Picture

    public void paint(Graphics g) {
        if (myMovie != null) {
            Graphics2D g2 = createGraphics2D();

            g2.setStroke(new BasicStroke(1));
            myStrokeWidth = 0;

            if (allowDrag) {
                g2.translate(offsetX, offsetY);
            }

            // The Origonal Transform
            //AffineTransform origonalTransform = new AffineTransform();

            if (autoSize) {
                float myWindowWidth = getWidth();
                float myWindowHeight = getHeight();
                float targetWidth = (float) movieRectangle2D.getWidth();
                float targetHeight = (float) movieRectangle2D.getHeight();

                float scaleX = myWindowWidth / targetWidth;
                float scaleY = myWindowHeight / targetHeight;

                g2.scale(scaleX, scaleY);
            }

            //g2.setTransform(origonalTransform);

            // Make Initial Clipping Area
            Area initialClippingPath = null;
            if (!allowDrag) {
                initialClippingPath = new Area(movieRectangle2D);
            }

            // Set the Clipping Area
            g2.setClip(initialClippingPath);

            // Draw The Movie
            drawMovie(g2, myMovie, 0);

            g.drawImage(bimg, 0, 0, this);
            ready = true;
            //origonalTransform = null;
            initialClippingPath = null;
        } else {
            Graphics2D g2 = createGraphics2D();

            AffineTransform tempTransform = new AffineTransform();
            tempTransform.translate((getWidth() / 2) - (myDefaultImage.getWidth() / 2), (getHeight() / 2) - (myDefaultImage.getHeight() / 2));
            g2.drawImage(myDefaultImage, tempTransform, (ImageObserver) this);

            g.drawImage(bimg, 0, 0, this);
        }
    }

    // Draw a Movie

    public void drawMovie(Graphics2D g2, FMovieData aMovie, int depth) {
        //System.out.println("Drawing Movie Depth " + depth + " Frame " + (aMovie.getFrame()));

        // Get the Origonal Composite
        Composite myOrigonalComposite = g2.getComposite();
        // Get the Origonal Clipping Path
        Shape entryClip = g2.getClip();
        // Get the Origonal Transformation
        AffineTransform entryTransform = g2.getTransform();

        // Get the display list
        Vector list = aMovie.getDisplayList();
        // My Clipping path
        Area myClippingPath = null;
        // My Clipping Depth
        int clippingDepth = -1;

        for (int x = 0; x < list.size(); x++) {
            FDisplayListItem di = (FDisplayListItem) list.get(x);

            if (di == null) {
                continue;
            }

            // Get the display object
            Object data = di.getObject();
            // Get the object matrix
            FMatrix aMatrix = di.getMatrix();
            // Get the Color Form
            CXFORMALPHA aCXFORMALPHA = di.getCXFORMALPHA();

            // Build my items concatenated matrix
            AffineTransform currentTransform = null;
            if (aMatrix != null) {
                currentTransform = aMatrix.getTransform();
            } else {
                currentTransform = new AffineTransform();
            }


            if (aCXFORMALPHA != null) {
                if (aCXFORMALPHA.HasAddTerms()) {
                    //System.out.println("Add");
                    if (aCXFORMALPHA.getAdd(3) > 0 && aCXFORMALPHA.getAdd(3) <= 255) // Just Skip for now
                    {
                        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, aCXFORMALPHA.getAdd(3) / 255.0f));
                        //continue;
                    }

                } else if (aCXFORMALPHA.HasMultTerms()) {
                    //System.out.println("Mul");
                    // Just Worry about Alpha
                    if (aCXFORMALPHA.getMulti(3) > 0 && aCXFORMALPHA.getMulti(3) <= 255) // Just Skip for now
                    {
                        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, aCXFORMALPHA.getMulti(3) / 255.0f));
                        //continue;
                    }
                }
            }

            if (di.isVisible()) {
                if (di.getClipLayer()) {
                    Area myClippingArea = Clipper.clip(data).createTransformedArea(currentTransform);
                    if (entryClip != null) {
                        Area entryArea = new Area(entryClip);
                        myClippingArea.intersect(entryArea);
                    }
                    g2.setClip(myClippingArea);
                    clippingDepth = di.getClipDepth() - 1;
                } else {
                    if (clippingDepth != -1) {
                        if (clippingDepth < x) {
                            clippingDepth = -1;
                            g2.setClip(entryClip);
                        }
                    }

                    if (data instanceof FShape) {
                        FShape fs = (FShape) data;
                        g2.transform(currentTransform);
                        drawShape(fs.getRenderData(), g2);
                        g2.setTransform(entryTransform);
                        fs = null;
                    }
                    if (data instanceof FText) {
                        FText fs = (FText) data;
                        g2.transform(currentTransform);
                        drawText(fs, g2);
                        g2.setTransform(entryTransform);
                        fs = null;
                    } else if (data instanceof FMorph) {
                        FMorph fm = (FMorph) data;
                        g2.transform(currentTransform);
                        drawShape(MorphShape.getAdvancedPathVector(fm, di.getRatio() / 65535.0f), g2);
                        g2.setTransform(entryTransform);
                        fm = null;
                    } else if (data instanceof FMovieData) {
                        FMovieData fmd = (FMovieData) data;
                        g2.transform(currentTransform);
                        drawMovie(g2, fmd, depth + 1);
                        g2.setTransform(entryTransform);
                        fmd = null;
                    }
                }
            }

            if (aCXFORMALPHA != null) {
                g2.setComposite(myOrigonalComposite);
                aCXFORMALPHA = null;
            }
        }

        myOrigonalComposite = null;
        list = null;
        //myClippingPath = null;
        g2.setClip(entryClip);
    }

    // Draw a Shape

    public void drawText(FText aText, Graphics2D g2) {
        //System.out.println("Draw Text");
        AffineTransform entryTransform = g2.getTransform();
        // System.out.println("IN:" + entryTransform);
        if (aText.getMatrix() != null) {
            entryTransform.concatenate(aText.getMatrix().getTransform());
        }
        //System.out.println("OUT:" + entryTransform);

        Vector myRecords = aText.getRecords();

        FFont myFont = null;
        FColor myColor;
        float offsetX = 0;
        float offsetY = 0;
        float height = 0;
        float myAdvance = 0;

        for (int z = 0; z < myRecords.size(); z++) {
            Object myObject = myRecords.get(z);
            if (myObject instanceof FTextRecord) {
                FTextRecord aRecord = (FTextRecord) myObject;
                //System.out.println("Record");

                if (aRecord.getFont() != null) {
                    myFont = aRecord.getFont();
                    height = aRecord.getHeight() / 20.0f;
                }
                if (aRecord.getColor() != null) {
                    myColor = aRecord.getColor();
                    g2.setColor(myColor.toColor());
                }

                if (!aRecord.hasOffsetX() && !aRecord.hasOffsetY()) {
                    //myAdvance = 0;
                } else {
                    myAdvance = 0;
                    if (aRecord.hasOffsetX()) {
                        offsetX = aRecord.getOffsetX() / 20.0f;
                    }
                    if (aRecord.hasOffsetY()) {
                        offsetY = aRecord.getOffsetY() / 20.0f;
                    }
                }
            } else {
                FTextGlyph aGlyph = (FTextGlyph) myObject;
                if (myFont == null || myFont.getGlyphs() == null) {
                    continue;
                }
                Vector glyphs = (myFont.getGlyphs())[aGlyph.getIndex()];

                GeneralPath path = null;
                AdvancedPath myPath;

                AffineTransform currentTransform = (AffineTransform) entryTransform.clone();

                float myScaleTransform = 1;
                if (myFont.getFormat() == 3) {
                    myScaleTransform = ((height * 100.0f) / (1024)) / 100.0f;
                } else {
                    myScaleTransform = ((height * 100.0f) / (1024.0f / 20.0f)) / 100.0f;
                }


                currentTransform.translate(myAdvance + offsetX, offsetY);

                currentTransform.scale(myScaleTransform, myScaleTransform);

                g2.setTransform(currentTransform);

                myAdvance += (float) (aGlyph.getAdvance() / 20.0f);

                for (int a = 0; a < glyphs.size(); a++) {
                    Object gl = glyphs.get(a);
                    if (gl instanceof AdvancedPath) {
                        myPath = (AdvancedPath) glyphs.get(a);
                        path = myPath.getPath();

                        g2.fill(path);
                    }
                }
            }
        }
    }

    public void drawShape(Vector renderData, Graphics2D g2) {
        GeneralPath path = null;
        AdvancedPath myPath;

        FGradientRecord rS = null;
        FGradientRecord rE = null;

        //System.out.println();

        //System.out.println("Render: " + renderData.size());

        for (int x = 0; x < renderData.size(); x++) {
            myPath = (AdvancedPath) renderData.get(x);
            path = null;

            path = myPath.getPath();

            if (myPath.getLine() != null) {
                FLine myLineStyle = myPath.getLine();
                if (myLineStyle.getColor().getA() > 0) {
                    g2.setColor(myLineStyle.getColor().toColor());
                    g2.setStroke(myLineStyle.getStroke());
                    g2.draw(path);
                }
                continue;
            } else if (myPath.getFill() == null) {

            } else {
                //System.out.println(myPath.getFill().getStyle());
                if (myPath.getFill().getStyle() == FFill.SOLID) {
                    FSolid sfs = (FSolid) myPath.getFill();
                    myRGBA = sfs.getColor();
                    g2.setColor(myRGBA.toColor());

                    int alpha = (myRGBA.getA() > 0) ? myRGBA.getA() : 255;

                    if (alpha < 255) {
                        alphaFill(alpha, path, g2, g2.getComposite());
                    } else {
                        g2.fill(path);
                    }

                } // End Solid Fill


                else if (myPath.getFill().getStyle() == FFill.LGRADIENT || myPath.getFill().getStyle() == FFill.RGRADIENT) {
                    FGradient gfs = (FGradient) myPath.getFill();

                    Vector myGradient = gfs.getGradient();
                    if (myGradient.size() > 0) {
                        float[] myPerc = new float[myGradient.size()];
                        Color[] myColor = new Color[myGradient.size()];

                        for (int z = 0; z < myGradient.size(); z++) {
                            myPerc[z] = ((FGradientRecord) myGradient.get(z)).getRatio() / 255.0f;
                            myColor[z] = ((FGradientRecord) myGradient.get(z)).getColor().toColor();
                        }

                        //rS = (FGradientRecord)myGradient.get(0);
                        //rE = (FGradientRecord)myGradient.get(myGradient.size()-1);

                        if (!allowGradient) {
                            g2.setColor(myColor[0]);
                            if (gfs.getAlpha() < 255) {
                                alphaFill(gfs.getAlpha(), path, g2, g2.getComposite());
                            } else {
                                g2.fill(path);
                            }
                            continue;
                        }

                        AffineTransform gradMatrix = gfs.getMatrix().getTransform();// (AffineTransform)previousMatrix.clone();

                        float point1 = -819.2f; // Gradient Cheat

                        float point2 = 819.2f; // Gradient Cheat

                        float myPoints[] = {-819.2f, 0, 819.2f, 0, 0, 0, 819.2f, 819.2f};

                        gradMatrix.transform(myPoints, 0, myPoints, 0, 4);
                        // for (int z=0;z<myPoints.length;z++)
                        //{
                        //System.out.println(myPoints[z]);
                        //	}

                        //LinearGradientPaint(float startX, float startY, float endX, float endY, float[] fractions, Color[] colors)
                        //LinearGradientPaint(Point2D start, Point2D end, float[] fractions, Color[] colors)
                        if (myPath.getFill().getStyle() == FFill.LGRADIENT) {
                            // Catch a Paint Error
                            try {
                                g2.setPaint(new LinearGradientPaint(myPoints[0], myPoints[1], myPoints[2], myPoints[3], myPerc, myColor));
                            } catch (IllegalArgumentException iae) {
                                g2.setColor(myColor[0]);
                            }
                        } else {
                            Point2D p1 = new Point2D.Double(myPoints[4], myPoints[5]);
                            Point2D p2 = new Point2D.Double(myPoints[6], myPoints[7]);
                            // Catch a Paint Error
                            try {
                                g2.setPaint(new RadialGradientPaint(myPoints[4], myPoints[5], (float) Math.abs(p1.distance(p2)), myPerc, myColor));
                            } catch (IllegalArgumentException iae) {
                                g2.setColor(myColor[0]);
                            }
                        }

                        //g2.setPaint(new GradientPaint(myPoints[0], myPoints[1], rS.getColor().toColor(), myPoints[2], myPoints[3], rE.getColor().toColor()));

                        if (gfs.getAlpha() < 255.0f) {
                            alphaFill(gfs.getAlpha(), path, g2, g2.getComposite());
                        } else {
                            g2.fill(path);
                        }
                    }
                } // End Gradient Fill

                else if (myPath.getFill().getStyle() == FFill.TBITMAP || myPath.getFill().getStyle() == FFill.CBITMAP) {
                    FTexture ftex = (FTexture) myPath.getFill();


                    if (ftex.getBitmap() != null) {
                        //System.out.println(ftex);

                        // Get the Origonal Clipping Path
                        Shape entryClip = g2.getClip();
                        AffineTransform entryTransform = g2.getTransform();

                        Area myClippingArea = Clipper.clip(path);//.createTransformedArea( entryTransform )
                        if (entryClip != null) {
                            Area entryArea = new Area(entryClip);
                            myClippingArea.intersect(entryArea);
                        }
                        g2.setClip(myClippingArea);

                        g2.drawImage(ftex.getBitmap().getImage(), ftex.getMatrix().getTransform(), (ImageObserver) this);//

                        g2.setClip(entryClip);
                        //g2.drawImage(ftex.getBitmap().getImage(), new AffineTransform(),null);//(ImageObserver)this
                        //g2.drawImage(ftex.getBitmap().getImage(), null, 0, 0);
                    } else {
                        //System.out.println("Missing Texture: " + ftex.getBitmapID());
                    }

                } // End Solid Fill

                else // Textures and stuff
                {
                    g2.setColor(Color.GRAY);

                    g2.fill(path);
                } // End Unknown Fill
                // }
            }
        }
    }

    private void alphaFill(int alpha, Shape path, Graphics2D g2, Composite myOrigonalComposite) {
        if (alpha >= 0 && alpha < 255) {
            //System.out.println("Alpha Fill");
            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha / 255.0f));
            g2.fill(path);
            g2.setComposite(myOrigonalComposite);
        }
    }

    private void alphaFill(float alpha, Shape path, Graphics2D g2, Composite myOrigonalComposite) {
        if (alpha >= 0.0f && alpha < 255.0f) {
            //System.out.println("Alpha Fill");
            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha / 255.0f));
            g2.fill(path);
            g2.setComposite(myOrigonalComposite);
        }
    }

    private class DisplayMouseListener implements MouseListener {
        int startX;
        int startY;

        public DisplayMouseListener() {
            startX = -1;
            startY = -1;
        }

        public void mouseClicked(MouseEvent e) {

        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void mousePressed(MouseEvent e) {
            if (allowDrag) {
                startX = e.getX();
                startY = e.getY();
            }
        }

        public void mouseReleased(MouseEvent e) {
            if (allowDrag && startX != -1) {
                if (e.getX() > startX) {
                    offsetX += e.getX() - startX;
                } else {
                    offsetX -= startX - e.getX();
                }

                if (e.getY() > startY) {
                    offsetY += e.getY() - startY;
                } else {
                    offsetY -= startY - e.getY();
                }

                mySelf.repaint();
            }
            startX = -1;
        }
    }
}