package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.support.swf.objects.*;
import com.mgatelabs.swftools.support.tools.JMenuItemCreator;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;

public class GuiDisplayList extends JPanel {
    private Vector exploitTreeListeners = new Vector();

    private Vector myDisplayListVector;

    // Private Display List Item
    private GuiDisplayDetails myGuiDisplayDetails;

    // Tree Variables
    private JTree myTree;
    JScrollPane treeView;
    DefaultMutableTreeNode nodeRoot;

    // Pop Up Variables
    private JPopupMenu folderPopup;
    private JPopupMenu shapePopup;

    private JMenuItem folderNextFrame;
    private JMenuItem folderNext10Frame;
    private JMenuItem folderNext100Frame;
    private JMenuItem folderToggleVis;
    private JMenuItem folderCancel;

    private JMenuItem shapeToggleVis;
    private JMenuItem shapeCancel;

    public GuiDisplayList() {
        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        myGuiDisplayDetails = new GuiDisplayDetails();

        myDisplayListVector = null;

        createNodes();

        buildGui();
    }

    private void buildGui() {
        MyMouseListener mml = new MyMouseListener();

        myTree = new JTree(nodeRoot);
        myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        myTree.addMouseListener(mml);
        treeView = new JScrollPane(myTree);

        buildPopups();

        add(treeView);
        add(myGuiDisplayDetails);
    }

    public void updateNodes(Vector displayList) {
        clean(false);
        buildTree(displayList, nodeRoot);

        refreshTree();
    }

    // Clean Up Current Fields

    public void clean(boolean refresh) {
        myGuiDisplayDetails.clear();

        nodeRoot.removeAllChildren();
        if (refresh) {
            refreshTree();
        }
    }

    // Create the base nodes

    public void createNodes() {
        nodeRoot = new DefaultMutableTreeNode("Display");
    }

    // Setup the current tree nodes

    public void buildTree(Vector displayList, DefaultMutableTreeNode root) {

        if (displayList == null) {
            return;
        }

        for (int x = 0; x < displayList.size(); x++) {
            Object obj = displayList.get(x);

            if (obj == null) {
                continue;
                //root.insert(new DefaultMutableTreeNode("Layer: " + (x+1)+ " Empty"), 0);
            } else {
                FDisplayListItem myDItem = (FDisplayListItem) obj;
                obj = myDItem.getObject();

                if (obj instanceof FShape) {
                    FShape aShape = (FShape) obj;
                    root.insert(new DefaultMutableTreeNode(new GuiTreeItem(myDItem, aShape, GuiTreeItem.SHAPE, "Layer: " + (x + 1) + " Shape ID: " + aShape.getID() + myDItem.getQuickInfo())), 0);
                } else if (obj instanceof FMorph) {
                    FMorph aMorph = (FMorph) obj;
                    root.insert(new DefaultMutableTreeNode(new GuiTreeItem(myDItem, aMorph, GuiTreeItem.MORPH, "Layer: " + (x + 1) + " Morph ID: " + aMorph.getID() + myDItem.getQuickInfo())), 0);
                } else if (obj instanceof FMovieData) {
                    FMovieData aMovie = (FMovieData) obj;
                    DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(new GuiTreeItem(myDItem, aMovie, GuiTreeItem.FOLDER, "Layer: " + (x + 1) + " Movie" + "(" + aMovie.getFrame() + "/" + aMovie.getFrameCount() + ")" + myDItem.getQuickInfo()));

                    root.insert(tempNode, 0);
                    buildTree(aMovie.getDisplayList(), tempNode);
                    tempNode.insert(new DefaultMutableTreeNode(new GuiTreeItem(myDItem, aMovie.getMovie(), GuiTreeItem.MOVIE, "Movie" + myDItem.getQuickInfo())), 0);
                } else if (obj instanceof FText) {
                    FText aText = (FText) obj;
                    root.insert(new DefaultMutableTreeNode(new GuiTreeItem(myDItem, aText, GuiTreeItem.TEXT, "Layer: " + (x + 1) + " Text ID: " + aText.getID() + myDItem.getQuickInfo())), 0);
                }
            }
        }
    }

    // Tree Functions
    private void refreshTree() {
        DefaultTreeModel myTreeModel = (DefaultTreeModel) myTree.getModel();
        myTreeModel.setRoot(nodeRoot);
        myTreeModel.reload();
    }

    private void buildPopups() {
        folderPopup = new JPopupMenu();
        shapePopup = new JPopupMenu();

        PopupActionListener myPopupActionListener = new PopupActionListener();

        JMenuItemCreator myMenuItemCreator = new JMenuItemCreator(myPopupActionListener);

        folderNextFrame = myMenuItemCreator.build("Next Frame");
        folderNext10Frame = myMenuItemCreator.build("Next 10 Frames");
        folderNext100Frame = myMenuItemCreator.build("Next 100 Frames");
        folderToggleVis = myMenuItemCreator.build("Toggle Visibility");
        folderCancel = myMenuItemCreator.build("Cancel");

        folderPopup.add(folderNextFrame);
        folderPopup.add(folderNext10Frame);
        folderPopup.add(folderNext100Frame);
        folderPopup.add(folderToggleVis);
        folderPopup.add(folderCancel);

        shapeToggleVis = myMenuItemCreator.build("Toggle Visibility");
        shapeCancel = myMenuItemCreator.build("Cancel");

        shapePopup.add(shapeToggleVis);
        shapePopup.add(shapeCancel);
    }

    private class PopupActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == folderNextFrame) {
                GuiTreeItem aItem = getTreeItem();
                if (aItem != null && aItem.getType() == GuiTreeItem.FOLDER) {
                    // Hacking Time
                    FMovieData fmd = (FMovieData) aItem.getObject();
                    fmd.nextFrame();
                    ExploitMovieUpdate();
                }
            }
            if (e.getSource() == folderNext10Frame) {
                GuiTreeItem aItem = getTreeItem();
                if (aItem != null && aItem.getType() == GuiTreeItem.FOLDER) {
                    // Hacking Time
                    FMovieData fmd = (FMovieData) aItem.getObject();
                    for (int x = 0; x < 10; x++) {
                        fmd.nextFrame();
                    }
                    ExploitMovieUpdate();
                }
            }
            if (e.getSource() == folderNext100Frame) {
                GuiTreeItem aItem = getTreeItem();
                if (aItem != null && aItem.getType() == GuiTreeItem.FOLDER) {
                    // Hacking Time
                    FMovieData fmd = (FMovieData) aItem.getObject();
                    for (int x = 0; x < 100; x++) {
                        fmd.nextFrame();
                    }
                    ExploitMovieUpdate();
                }
            } else if (e.getSource() == folderToggleVis || e.getSource() == shapeToggleVis) {
                GuiTreeItem aItem = getTreeItem();
                if (aItem != null && aItem.getType() == GuiTreeItem.FOLDER || aItem.getType() == GuiTreeItem.SHAPE) {
                    aItem.getItem().toggleVisible();
                    ExploitMovieUpdate();
                }
            }
        }

    }

    public GuiTreeItem getTreeItem() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) myTree.getLastSelectedPathComponent();

        if (node == null) {
            return null;
        } else if (node.getUserObject() instanceof String) {
            return null;
        } else if (node.getUserObject() instanceof GuiTreeItem) {
            return (GuiTreeItem) node.getUserObject();
        }

        return null;
    }

    // Listener Parts
    private class MyMouseListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {//Invoked when the mouse button has been clicked (pressed and released) on a component.
            if (e.getSource() == myTree) {
                if (e.getButton() == e.BUTTON1) {
                    if (e.getClickCount() == 2) {
                        GuiTreeItem aItem = getTreeItem();

                        if (aItem == null) {
                            return;
                        } else {
                            if (aItem.getType() == aItem.SHAPE) {
                                ExploitObject((FShape) aItem.getObject());
                            } else if (aItem.getType() == aItem.MORPH) {
                                ExploitObject(aItem.getObject());
                            } else if (aItem.getType() == aItem.MOVIE) {
                                ExploitObject((FMovieInterface) aItem.getObject());
                            }
                        }
                    } else {
                        GuiTreeItem aItem = getTreeItem();

                        if (aItem == null) {
                            return;
                        } else {
                            if (aItem.getType() == aItem.SHAPE) {
                                myGuiDisplayDetails.update(aItem.getItem());
                            }
                            if (aItem.getType() == aItem.TEXT) {
                                myGuiDisplayDetails.update(aItem.getItem());
                            } else if (aItem.getType() == aItem.MOVIE || aItem.getType() == aItem.FOLDER) {
                                myGuiDisplayDetails.update(aItem.getItem());
                            } else if (aItem.getType() == aItem.FOLDER) {
                                myGuiDisplayDetails.update(aItem.getItem());
                            } else {
                                myGuiDisplayDetails.clear();
                            }
                        }
                    }
                } else {
                    GuiTreeItem aItem = getTreeItem();


                    if (aItem == null) {

                        return;
                    } else {
                        if (aItem.getType() == GuiTreeItem.SHAPE) {
                            shapePopup.show(e.getComponent(), e.getX(), e.getY());
                        } else if (aItem.getType() == GuiTreeItem.FOLDER) {
                            folderPopup.show(e.getComponent(), e.getX(), e.getY());
                        }
                    }
                }
            }
        }

        public void mouseEntered(MouseEvent e) {
        }

        //Invoked when the mouse enters a component.
        public void mouseExited(MouseEvent e) {
        }

        //Invoked when the mouse exits a component.
        public void mousePressed(MouseEvent e) {
        }

        //Invoked when a mouse button has been pressed on a component.
        public void mouseReleased(MouseEvent e) {
        }
        //Invoked when a mouse button has been released on a component.
    }

    void ExploitObject(Object obj) {
        Vector l;
        //ExploitMovieObject eso = new ExploitMovieObject(aMovie);

        synchronized (this) {
            l = (Vector) exploitTreeListeners.clone();
        }

        for (int i = 0; i < l.size(); i++) {
            ExploitTreeListener sl = (ExploitTreeListener) l.elementAt(i);
            sl.handleObject(obj);
        }
    }

    void ExploitMovieUpdate() {
        Vector l;
        //ExploitMovieObject eso = new ExploitMovieObject(aMovie);

        synchronized (this) {
            l = (Vector) exploitTreeListeners.clone();
        }

        for (int i = 0; i < l.size(); i++) {
            ExploitTreeListener sl = (ExploitTreeListener) l.elementAt(i);
            sl.handleObject("MUP");
            //sl.handleMovieUpdate();
        }
    }

    public synchronized void addExploitTreeListener(ExploitTreeListener sl) {
        exploitTreeListeners.addElement(sl);
    }

    public synchronized void removeExploitTreeListener(ExploitTreeListener sl) {
        exploitTreeListeners.removeElement(sl);
    }

}