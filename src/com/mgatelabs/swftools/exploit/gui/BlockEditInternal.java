package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.support.swf.objects.FMovie;
import com.mgatelabs.swftools.support.swf.tags.TBlock;

import javax.swing.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.Vector;

public class BlockEditInternal extends JPanel {
    // My Self
    private BlockEditInternal myself;

    // My Movie Object
    private FMovie myMovie;
    // My List
    private JList myList;
    // My Scrollpane
    private JScrollPane myView;
    // My List Model
    private DefaultListModel myListModel;
    // My Mouse Listener
    private FormMouseListener listListen;
    // My Parent List
    private Vector myParents;

    private File myFile;

    // My Provate Movie Info
    private BlockEditMovieInfo myInfo;

    // My Object List
    private Vector myObjects;

    public BlockEditInternal(File aFile, FMovie aMovie, Vector aObjects) {
        myself = this;

        // Interanilize
        internal_setup();

        // Build the UI
        construct();

        // Hook the UI
        hook();

        // Finalize

        // Set Objects
        myMovie = aMovie;
        myObjects = aObjects;
        myFile = aFile;
        // Update Info
        myInfo.update(myMovie);

        // Make the List
        updateList(myList, myListModel, myObjects);
    }

    public File getFile() {
        return myFile;
    }

    public void setFile(File aFile) {
        myFile = aFile;
    }

    public FMovie getMovie() {
        return myInfo.get();
    }

    public Vector getObjects() {
        return myObjects;
    }

    public TBlock getSelectedObject() {
        int i = getSelectedIndex();
        if (i >= 0) {
            return (TBlock) myList.getSelectedValue();
        } else {
            return null;
        }
    }

    public TBlock getObjectAtIndex(int index) {
        return (TBlock) myObjects.get(index);
    }

    public int getSelectedIndex() {
        return myList.getSelectedIndex();
    }

    public void update() {
        updateList(myList, myListModel, myObjects);
    }

    public void updateMovieInfo() {
        myInfo.update(myMovie);
    }

    public void update(DefaultListModel aListModel) {
        myList.setModel(aListModel);
    }

    private static void updateList(JList aList, DefaultListModel aModel, Vector objects) {
        aModel.clear();

        for (int x = 0; x < objects.size(); x++) {
            aModel.addElement(objects.get(x));
        }

        aList.setModel(aModel);
    }

    public DefaultListModel getModel() {
        return myListModel;
    }

    // Setup Listeners
    private void internal_setup() {
        // Make a new Empty Vector
        myParents = new Vector();
    }

    private void addObjectListener(BlockEditInternalListener aParent) {
        myParents.add(aParent);
    }

    private void removeObjectListener(BlockEditInternalListener aParent) {
        myParents.remove(aParent);
    }

    private void call(Object a) {
        for (int x = 0; x < myParents.size(); x++) {
            BlockEditInternalListener beil = (BlockEditInternalListener) myParents.get(x);
            beil.call(a, myself);
        }
    }

    // Build the User Interface
    private void construct() {
        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        myList = new JList();
        myView = new JScrollPane(myList);
        myList.setCellRenderer(new BlockCellRenderer(this.getClass()));
        myListModel = new DefaultListModel();

        myInfo = new BlockEditMovieInfo();

        this.add(myInfo);
        this.add(myView);
    }

    private void hook() {
        // Make the List Listener
        listListen = new FormMouseListener();
        // Add the List to the Listener
        myList.addMouseListener(listListen);
    }

    private class FormMouseListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {//Invoked when the mouse button has been clicked (pressed and released) on a component.
            if (e.getSource() == myList) {

                if (e.getButton() == e.BUTTON1) {
                    if (e.getClickCount() == 2 && myList.getSelectedIndex() >= 0) {
                        // Get the Selected Block
                        TBlock aBlock = (TBlock) myList.getSelectedValue();

                        // Pass Call to Parent
                        call(aBlock);
                    }
                }
            }
        }

        public void mouseEntered(MouseEvent e) {
        }

        //Invoked when the mouse enters a component.
        public void mouseExited(MouseEvent e) {
        }

        //Invoked when the mouse exits a component.
        public void mousePressed(MouseEvent e) {
        }

        //Invoked when a mouse button has been pressed on a component.
        public void mouseReleased(MouseEvent e) {
        }
        //Invoked when a mouse button has been released on a component.
    }

}