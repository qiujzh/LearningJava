package com.mgatelabs.swftools.exploit.gui;

import com.mgatelabs.swftools.exploit.hook.BlockEditInterface;
import com.mgatelabs.swftools.support.filters.CommonFileFilter;
import com.mgatelabs.swftools.support.plugins.BlockPlugin;
import com.mgatelabs.swftools.support.plugins.Plugin;
import com.mgatelabs.swftools.support.swf.io.BlockIO;
import com.mgatelabs.swftools.support.swf.objects.FMovie;
import com.mgatelabs.swftools.support.swf.tags.TBlock;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.StringTokenizer;
import java.util.Vector;

public class BlockEditDialog extends GuiInternal implements BlockEditInterface {
    //Variables
    private BlockEditDialog mySelf;

    private ExploitActionListener myExploitActionListener;
    //private FormMouseListener    myFormMouseListener;

    private JMenuItem menuFileOpen;
    private JMenuItem menuFileClose;
    private JMenuItem menuFileSave;
    private JMenuItem menuFileSaveCompress;

    private JMenu menuRoot, menuEdit;

    private JMenuItem menuExportData;
    private JMenuItem menuExportBlock;

    private JMenuItem menuEditCopy;
    private JMenuItem menuEditCut;
    private JMenuItem menuEditPaste;

    private JMenuItem menuBlockRemove;
    private JMenuItem menuBlockReplace;
    private JMenuItem menuBlockInsert;
    private JMenuItem menuBlockId;
    private JMenuItem menuAlterVersion;

    private JFileChooser myJFileChooser;

    private JDesktopPane jde;

    private JFrame myMaster;

    private Vector myWindows;

    private Vector myPlugins;

    private TBlock copyBuffer;

    public BlockEditDialog(JFrame master) {
        super("Block Editor (Beta)", false, false, (master != null), false);

        this.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/block.png")));

        myWindows = new Vector();
        myPlugins = null;
        copyBuffer = null;

        myMaster = master;
        //myVector = null;
        //myMovie = null;

        mySelf = this;

        buildControls();

        menuMaster(false);

        this.getContentPane().add(buildGui());
        this.pack();
    }

    // Frame Information
    public JFrame getFrame() {
        return myMaster;
    }

    // Plugin Updates

    public void updateMenuWithPlugins(Vector plugins) {
        myPlugins = plugins;

        for (int x = 0; x < plugins.size(); x++) {
            Plugin p = (Plugin) plugins.get(x);
            if (p.getType() == Plugin.BLOCK) {
                if (p instanceof BlockPlugin) {
                    BlockPlugin bp = (BlockPlugin) p;
                    // Get the Proposed Menu Path
                    StringTokenizer st = new StringTokenizer(bp.getMenuPath(), ":");
                    JMenu targetMenu = menuRoot;
                    while (st.hasMoreElements()) {
                        String tName = st.nextToken();
                        if (tName.length() > 0) {
                            targetMenu = findSubMenu(targetMenu, tName);
                        }
                    }

                    JMenuItem aItem = new JMenuItem(bp.getMenuName());
                    aItem.setActionCommand("!" + x);

                    targetMenu.add(aItem);
                    aItem.addActionListener(myExploitActionListener);
                }
            }
            //menuRoot
        }
    }

    public JMenu findSubMenu(JMenu parent, String name) {
        Component[] cm = parent.getMenuComponents();

        for (int x = 0; x < cm.length; x++) {
            if (cm[x] instanceof JMenu) {
                JMenu aMenu = (JMenu) cm[x];
                if (aMenu.getText().trim().equals(name)) {
                    return aMenu;
                }
            }
        }

        JMenu nMenu = new JMenu(name);

        parent.add(nMenu);

        return nMenu;
    }

    // Controls

    private void buildControls() {
        myJFileChooser = new JFileChooser(new File("."));
        myJFileChooser.setFileFilter(new CommonFileFilter(".swf", "Adobe Flash Files"));

        myExploitActionListener = new ExploitActionListener();

        menuFileOpen = new JMenuItem("Open");
        menuFileClose = new JMenuItem("Close");
        menuFileSave = new JMenuItem("Save");
        menuFileSaveCompress = new JMenuItem("Save (Compress)");

        menuExportData = new JMenuItem("Data");
        menuExportBlock = new JMenuItem("Block");

        menuEditCopy = new JMenuItem("Copy");
        menuEditCut = new JMenuItem("Cut");
        menuEditPaste = new JMenuItem("Paste");

        menuBlockRemove = new JMenuItem("Remove");
        menuBlockReplace = new JMenuItem("Replace");
        menuBlockInsert = new JMenuItem("Insert (Above)");
        menuAlterVersion = new JMenuItem("Alter Version");

        menuEditCopy.addActionListener(myExploitActionListener);
        menuEditCut.addActionListener(myExploitActionListener);
        menuEditPaste.addActionListener(myExploitActionListener);

        menuFileOpen.addActionListener(myExploitActionListener);
        menuFileClose.addActionListener(myExploitActionListener);
        menuFileSave.addActionListener(myExploitActionListener);
        menuFileSaveCompress.addActionListener(myExploitActionListener);

        menuExportData.addActionListener(myExploitActionListener);
        menuExportBlock.addActionListener(myExploitActionListener);

        menuBlockRemove.addActionListener(myExploitActionListener);
        menuBlockReplace.addActionListener(myExploitActionListener);
        menuBlockInsert.addActionListener(myExploitActionListener);
        menuAlterVersion.addActionListener(myExploitActionListener);
        //menuBlockId.addActionListener(myExploitActionListener);

        JMenuBar myMenuBar = new JMenuBar();

        JMenu menuFile = new JMenu("File");

        menuFile.add(menuFileOpen);
        menuFile.add(menuFileClose);
        menuFile.addSeparator();
        menuFile.add(menuFileSave);
        menuFile.add(menuFileSaveCompress);

        myMenuBar.add(menuFile);

        menuEdit = new JMenu("Edit");

        menuEdit.add(menuEditCopy);
        menuEdit.add(menuEditCut);
        menuEdit.add(menuEditPaste);

        myMenuBar.add(menuEdit);

        menuRoot = new JMenu("Plugins");

        JMenu menuExport = new JMenu("Export");
        JMenu menuEdit = new JMenu("Edit");
        JMenu menuBuiltIn = new JMenu("Built-In");

        menuExport.add(menuExportData);
        menuExport.add(menuExportBlock);

        menuRoot.add(menuExport);
        menuRoot.add(menuEdit);
        menuRoot.add(menuBuiltIn);

        menuBuiltIn.add(menuBlockRemove);
        menuBuiltIn.add(menuBlockReplace);
        menuBuiltIn.addSeparator();
        menuBuiltIn.add(menuBlockInsert);
        menuBuiltIn.addSeparator();
        menuBuiltIn.add(menuAlterVersion);


        myMenuBar.add(menuRoot);

        this.setJMenuBar(myMenuBar);
    }

    // Form Building

    private JPanel buildGui() {
        JPanel master = new JPanel();
        master.setLayout(new BoxLayout(master, BoxLayout.X_AXIS));

        jde = new JDesktopPane();
        jde.setDragMode(jde.OUTLINE_DRAG_MODE);

        master.add(jde);

        return master;
    }

    ////////////////////////////////////////////////////////////////////////////

    private void menuMaster(boolean open) {
        menuFileClose.setEnabled(open);
        menuFileSave.setEnabled(open);
        menuFileSaveCompress.setEnabled(open);

        menuRoot.setEnabled(open);
        menuEdit.setEnabled(open);
    }

    ////////////////////////////////////////////////////////////////////////////

    private void clear() {
        menuMaster(false);
    }

    // IO Functions/////////////////////////////////////////////////////////////

    private boolean loadFlash(File aFile) {
        try {
            // Get the Reader
            BlockIO bio = new BlockIO();

            Object[] objects = bio.readFlash(aFile);

            BlockEditInternal bei = new BlockEditInternal(aFile, (FMovie) objects[0], (Vector) objects[1]);

            GuiInternal gi = new GuiInternal(bei, aFile.getName(), 320, 480, true, true);

            gi.setFrameIcon(new ImageIcon(this.getClass().getResource("/com/mgatelabs/swftools/exploit/gui/images/flash.png")));

            myWindows.add(gi);

            jde.add(gi);

            gi.show();

            menuMaster(true);

            return true;
        } catch (Exception e) {
            e.printStackTrace();

            JOptionPane.showMessageDialog(mySelf, "Java has experienced an error, most likely\ndue to running out of ram.\nPlease close this program and run\nit with a higher ram setting." + "\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);

            return false;
        }
    }

    private BlockEditInternal getTopWindow() {
        GuiInternal gi = (GuiInternal) jde.getSelectedFrame();
        JComponent jc = gi.getComponent();
        if (jc instanceof BlockEditInternal) {
            return (BlockEditInternal) jc;
        } else {
            return null;
        }
    }

    private boolean saveFlash(File aFile, boolean compress) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        try {
            // Get the Reader
            BlockIO bio = new BlockIO();

            FMovie aMovie = bei.getMovie();// myMovieInfo.get();

            if (aMovie == null) {
                JOptionPane.showMessageDialog(mySelf, "There is a error in the movie information on the right side of the window.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            } else {
                if (bio.writeFlash(aFile, aMovie, bei.getObjects(), compress)) {
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(mySelf, "Java has experienced an error, most likely\ndue to running out of ram.\nPlease close this program and run\nit with a higher ram setting." + "\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

    }

    public TBlock getSelectedBlock() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return null;
        }

        return bei.getSelectedObject();
    }

    public int getSelectedIndex() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return -1;
        }

        return bei.getSelectedIndex();
    }

    public TBlock getBlock(int index) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return null;
        }

        Vector dlo = bei.getObjects();

        if (index >= 0 && index < dlo.size()) {
            return (TBlock) dlo.get(index);
        }

        return null;
    }

    // Special Access
    public boolean copyBlock(int index) {
        TBlock aBlock = getBlock(index);
        if (aBlock != null) {
            copyBuffer = aBlock;
            aBlock = null;
            return true;
        } else {
            return false;
        }
    }

    public boolean cutBlock(int index) {
        if (copyBlock(index)) {
            return removeBlock(index);
        }
        return false;
    }

    public boolean pasteBlock(int index) {
        if (copyBuffer != null) {
            return insertBlock(index, copyBuffer);
        }
        return false;
    }

    public boolean replaceBlock(int index, TBlock aBlock) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        DefaultListModel dlm = bei.getModel();
        Vector dlo = bei.getObjects();

        dlo.set(index, aBlock);
        dlm.set(index, aBlock);

        bei.update(dlm);

        return false;
    }

    public void alterVersionNumber() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return;
        }

        FMovie m = bei.getMovie();

        int i = m.getVersion();
        i--;

        if (i < 0 || i > 14) {
            i = 9;
        }

        String[] versions = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"};

        String selectedValue = (String) JOptionPane.showInputDialog(null,

                "Version", "Alter Flash Version",

                JOptionPane.INFORMATION_MESSAGE, null,

                versions, (String) versions[i]);

        if (selectedValue != null && selectedValue.length() > 0) {
            try {
                i = Integer.parseInt(selectedValue);
                m.setVersion(i);
                bei.updateMovieInfo();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Could not alter flash version", "Internal Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    public void updateList() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return;
        }

        DefaultListModel dlm = bei.getModel();

        bei.update(dlm);
    }

    public int getObjectCount() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return -1;
        }

        Vector dlo = bei.getObjects();

        return dlo.size();
    }

    ////////////////////////////////////////////////////////////////////////////
    // Save Block

    public boolean saveBlock(int index, File aPath) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index < 0) {
            return false;
        }

        try {
            // Get the Reader
            BlockIO bio = new BlockIO();

            TBlock aBlock = bei.getObjectAtIndex(index);

            if (aBlock != null) {
                FMovie aMovie = bei.getMovie();// myMovieInfo.get();

                bio.writeBlock(aPath, aMovie, aBlock);
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();

            JOptionPane.showMessageDialog(mySelf, "Java has experienced an error, most likely\ndue to running out of ram.\nPlease close this program and run\nit with a higher ram setting." + "\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Save Data

    public boolean saveData(int index, File aFile) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index < 0) {
            return false;
        }

        try {
            // Get the Reader
            BlockIO bio = new BlockIO();

            TBlock aBlock = bei.getObjectAtIndex(index);

            if (aBlock != null) {
                FMovie aMovie = bei.getMovie();// myMovieInfo.get();

                bio.writeData(aFile, aMovie, aBlock);
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(mySelf, "Java has experienced an error, most likely\ndue to running out of ram.\nPlease close this program and run\nit with a higher ram setting." + "\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////

    public boolean removeBlock(int index) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index < 0) {
            return false;
        }

        if (index >= 0) {
            DefaultListModel dlm = bei.getModel();
            Vector dlo = bei.getObjects();

            dlo.remove(index);
            dlm.removeElementAt(index);

            bei.update(dlm);

            return true;
        } else {
            return false;
        }
    }

    ////////////////////////////////////////////////////////////////////////////

    public boolean replaceBlock(int index, File target) {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index < 0) {
            return false;
        }

        if (index >= 0) {
            try {
                BlockIO bio = new BlockIO();

                FMovie aMovie = bei.getMovie();

                TBlock aBlock = bio.readBlock(target, aMovie);

                DefaultListModel dlm = bei.getModel();
                Vector dlo = bei.getObjects();

                dlo.set(index, aBlock);
                dlm.set(index, aBlock);

                bei.update(dlm);

                return true;
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////

    public boolean insertBlock(int index, TBlock aBlock) {

        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index >= 0) {
            try {
                BlockIO bio = new BlockIO();

                DefaultListModel dlm = bei.getModel();
                Vector dlo = bei.getObjects();

                dlo.add(index, aBlock);
                dlm.add(index, aBlock);

                bei.update(dlm);
                return true;
            } catch (Exception e) {
                System.out.println(e);
            }

        }
        return false;
    }

    public boolean insertBlock(int index, File target) {

        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return false;
        }

        if (index >= 0) {
            try {
                BlockIO bio = new BlockIO();

                FMovie aMovie = bei.getMovie();

                TBlock aBlock = bio.readBlock(target, aMovie);

                DefaultListModel dlm = bei.getModel();
                Vector dlo = bei.getObjects();

                dlo.add(index, aBlock);
                dlm.add(index, aBlock);

                bei.update(dlm);
                return true;
            } catch (Exception e) {
                System.out.println(e);
            }

        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////

    public int getFlashVersion() {
        BlockEditInternal bei = getTopWindow();
        if (bei == null) {
            return -1;
        }

        FMovie aMovie = bei.getMovie();

        return aMovie.getVersion();
    }

    ////////////////////////////////////////////////////////////////////////////

    private class ExploitActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == menuFileOpen) {
                clear();
                int returnVal = myJFileChooser.showOpenDialog(mySelf);
                if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                    loadFlash(myJFileChooser.getSelectedFile());
                }
            } else if (e.getSource() == menuFileClose) {
                GuiInternal gi = (GuiInternal) jde.getSelectedFrame();
                JComponent jc = gi.getComponent();
                if (jc instanceof BlockEditInternal) {
                    gi.setVisible(false);

                    myWindows.remove(gi);
                    jde.remove(gi);
                }

                if (myWindows.size() == 0) {
                    menuMaster(false);
                }
            } else if (myWindows.size() > 0) {
                if (e.getSource() == menuFileSave || e.getSource() == menuFileSaveCompress) {
                    int returnVal = myJFileChooser.showSaveDialog(mySelf);
                    if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                        saveFlash(myJFileChooser.getSelectedFile(), e.getSource() == menuFileSaveCompress);
                    }
                } else if (e.getSource() == menuAlterVersion) {
                    alterVersionNumber();
                }
                // Export

                else {
                    BlockEditInternal bei = getTopWindow();
                    if (bei == null) {
                        return;
                    }

                    int index = bei.getSelectedIndex();

                    if (index < 0) {
                        return;
                    }

                    if (e.getSource() == menuExportData) {
                        int returnVal = myJFileChooser.showSaveDialog(mySelf);
                        if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                            saveData(index, myJFileChooser.getSelectedFile());
                        }
                    } else if (e.getSource() == menuExportBlock) {
                        int returnVal = myJFileChooser.showSaveDialog(mySelf);
                        if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                            saveBlock(index, myJFileChooser.getSelectedFile());
                        }
                    } else if (e.getSource() == menuBlockRemove) {
                        removeBlock(index);
                    } else if (e.getSource() == menuBlockInsert) {
                        int returnVal = myJFileChooser.showOpenDialog(mySelf);
                        if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                            insertBlock(index, myJFileChooser.getSelectedFile());
                        }
                    } else if (e.getSource() == menuBlockReplace) {
                        int returnVal = myJFileChooser.showOpenDialog(mySelf);
                        if (returnVal == JFileChooser.APPROVE_OPTION) { // Were Good
                            replaceBlock(index, myJFileChooser.getSelectedFile());
                        }
                    } else if (e.getSource() == menuEditCopy) {
                        copyBlock(index);
                    } else if (e.getSource() == menuEditCut) {
                        cutBlock(index);
                    } else if (e.getSource() == menuEditPaste) {
                        pasteBlock(index);
                    }
                    // Plugin Check
                    else if (e.getSource() instanceof JMenuItem) {
                        JMenuItem jmi = (JMenuItem) e.getSource();
                        if (jmi.getActionCommand().startsWith("!")) {
                            String temp = jmi.getActionCommand().substring(1);
                            try {
                                int pIndex = Integer.parseInt(temp);
                                Plugin p = (Plugin) myPlugins.get(pIndex);
                                if (p instanceof BlockPlugin) {
                                    BlockPlugin bp = (BlockPlugin) p;
                                    TBlock selectedObject = bei.getSelectedObject();
                                    if (bp.isApplicable(selectedObject.getId())) {
                                        bp.work(mySelf);
                                    } else {
                                        JOptionPane.showMessageDialog(mySelf, "I'm sorry but the active plugin\nrejected the currently selected block", "Plugin Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                }

                            } catch (Exception ex) {
                                System.out.println(ex);
                            }
                        }
                    }
                }
            }
        }
    }
}