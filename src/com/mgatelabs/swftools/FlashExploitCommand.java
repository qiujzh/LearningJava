package com.mgatelabs.swftools;/*
      Copyright M-Gate Labs 2007
  */

/**
 <p>
 <b>Command Line</b>
 </p>
 <p>
 Simple Command Line Interface for Flash Exploit
 </p>
 */

import com.mgatelabs.swftools.exploit.control.AppControl;
import com.mgatelabs.swftools.exploit.conversion.MorphConverter;
import com.mgatelabs.swftools.exploit.io.ExportFrameToSVG;
import com.mgatelabs.swftools.support.plugins.AdvancedConverter;
import com.mgatelabs.swftools.support.swf.io.FlashFilter;
import com.mgatelabs.swftools.support.swf.io.FlashReader;
import com.mgatelabs.swftools.support.swf.objects.*;
import com.mgatelabs.swftools.support.swf.tags.PlaceObject;
import com.mgatelabs.swftools.support.swf.tags.Tag;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Vector;

// Flash Parsing
// Conversion / Export

public class FlashExploitCommand {

    private static void printFunction() {
        //852
        System.out.println("Program Commands:");
        System.out.println("\t-i: Input File");
        System.out.println("\t-o: Output File");
        System.out.println("\t-f: frame to parse 1-n");
        System.out.println("\t-filter: Filter to Disable, Bitmap b, Shapes s, Fonts f");
        System.out.println("\t-s: Special Flags, m=Disable Shape Moving");
        System.out.println("\t-mode: Extract mode, One Frame = frame, Dump = dump, Test = test, Dump Sounds = sound");
        System.out.println("\t-d: Debug mode");
        System.out.println("\t-z: Add Zero Points");
        System.out.println("\t-c: Compress output (*.svgz)");
        System.out.println("\nExamples:");
        System.out.println("One Frame, java -jar FECL -i test.swf -o test.svg -f 20");
        System.out.println("Dump,      java -jar FECL -i test.swf -o c:\\test\\ -mode dump");
        System.out.println("For more examples please check the wiki.");
    }

    public static void main(String args[]) {
        System.out.println("Flash Exploit CL 1.6");
        System.out.println("Parsing Engine : Flash Exploit 1.22 [IRON]");
        System.out.println("Copyright M-Gate Labs, 2009");
        System.out.println("http://www.mgatelabs.com/wiki/Flash_Exploit");
        System.out.println("");

        // File Names
        String inputFileName = null;
        String outputFileName = null;

        // Input SWF File
        File inputFile = null;

        // Output SVG File
        File outputFile = null;

        // Target Frame to Export
        int targetFrame = 1;

        // Extraction Mode
        int mode = 0;

        boolean parseShapes = true;
        boolean parseFonts = true;
        boolean parseBitmaps = true;
        boolean parseSounds = false;

        boolean dumpSounds = false;
        boolean compressOutput = false;
        boolean addZeroPoint = false;
        boolean specialMoveShape = true;

        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-i") && i < (args.length - 1)) {
                // Input File
                inputFile = new File(args[i + 1]);
            } else if (args[i].equals("-o") && i < (args.length - 1)) {
                // Output File
                outputFile = new File(args[i + 1]);
            } else if (args[i].equals("-c")) {
                // Compress
                compressOutput = true;
            } else if (args[i].equals("-f") && i < (args.length - 1)) {
                // Frame to Export, Default 1
                try {
                    // Parse out an Integer
                    targetFrame = Integer.parseInt(args[i + 1]);
                    System.out.println("FRAME: " + targetFrame);
                } catch (Exception e) {
                    System.out.println("Error Parsing Frame to Convert:" + e);
                    System.exit(1);
                }
            } else if (args[i].equals("-filter") && i < (args.length - 1)) {
                // Output File
                if (args[i + 1].equals("b")) {
                    parseBitmaps = false;
                } else if (args[i + 1].equals("f")) {
                    parseFonts = false;
                } else if (args[i + 1].equals("s")) {
                    parseShapes = false;
                }
            } else if (args[i].equals("-s") && i < (args.length - 1)) {
                // Output File
                if (args[i + 1].equals("m")) {
                    specialMoveShape = false;
                }
            } else if (args[i].equals("-z")) {
                addZeroPoint = true;
            } else if (args[i].equals("-d")) {
                AppControl.getInfo().setDebug(true);
            } else if (args[i].equals("-mode") && i < (args.length - 1)) {
                // Output File
                if (args[i + 1].equals("frame")) {
                    mode = 0;
                } else if (args[i + 1].equals("dump")) {
                    mode = 1;
                } else if (args[i + 1].equals("test")) {
                    mode = 2;
                } else if (args[i + 1].equals("sound")) {
                    mode = 3;
                    parseShapes = false;

                    parseFonts = false;
                    parseBitmaps = false;
                    parseSounds = true;
                }
            }
        }

        // Test Stuff First
        if (inputFile == null || outputFile == null) {
            printFunction();
            return;
        }
        if (!inputFile.exists()) {
            System.out.println("Error: Input File not Found");
            return;
        } else if (mode == 0) // Normal Output
        {

        } else if (mode == 1 || mode == 3) // Dump
        {
            // Test if Everything is OK
            if (outputFile.exists() && outputFile.isDirectory()) {

            } else if ((outputFile.exists() && !outputFile.isDirectory()) || !outputFile.exists()) {
                // Make the Directories
                outputFile.mkdirs();
            }
        }

        // Make A Flash Filter
        // Used to Skip Tags, Like Sounds, Fonts...
        FlashFilter aFilter = new FlashFilter();

        // Only Parse Shape
        aFilter.setFilter(FlashFilter.SHAPE, parseShapes);
        aFilter.setFilter(FlashFilter.SOUND, parseSounds);
        aFilter.setFilter(FlashFilter.FONT, parseFonts);
        aFilter.setFilter(FlashFilter.BITMAP, parseBitmaps);
        aFilter.setFilter(FlashFilter.BITMAP_DISCARD, !parseBitmaps);


        System.out.println("Filter Information");
        System.out.println("\tShapes\t= " + aFilter.getFilter(FlashFilter.SHAPE));
        System.out.println("\tFonts\t= " + aFilter.getFilter(FlashFilter.FONT));
        System.out.println("\tImages\t= " + aFilter.getFilter(FlashFilter.BITMAP));
        System.out.println("\tSound\t= " + aFilter.getFilter(FlashFilter.SOUND));
        System.out.println("");

        // Make a Flash Reader, Which parses the Flash File
        FlashReader myReader = new FlashReader(inputFile, aFilter);
        if (mode == 0) {
            myReader.setMaxFrame(targetFrame);
        }

        // Set the Result to Null
        FMovie myFlashObject = null;

        // Test is the Reader Actually Works
        if (myReader.ready()) {
            // Parse Flash File and Return a Movie Object
            try {
                myFlashObject = myReader.parse();
            } catch (Exception e) {
                System.out.println(e);
                e.printStackTrace();
                System.exit(1);
            }
        }
        // Close the Reader
        myReader.close();

        // Test if the Parser Failed, Usually Overbyte Errors, i.e. Reading too Far
        if (myFlashObject == null) {
            System.out.println("Error While Reading Flash Format: " + myReader.getError());
            System.exit(1);
        }

        // Clean up
        myReader = null;

        // Advanced Conversion (!Overhead! Ram Intensive!)

        if (mode != 2 && mode != 3) {
            // Convert Shapes
            if (myFlashObject.getObjectVector().size() > 0) {
                AdvancedConverter ac = new AdvancedConverter();
                System.out.println("Conversion Engine: " + ac.getName() + "\n");
                ac.update(myFlashObject);
                ac = null;
            }

            // Convert Morphs
            if (myFlashObject.getObjectVector().size() > 0 && myFlashObject.ready()) {
                MorphConverter mc = new MorphConverter();
                mc.update(myFlashObject);
                mc = null;
            }
        }

        if (mode == 0) // Extract Frame
        {
            System.out.println("Exporting Frame # " + targetFrame);
            // Goto Target Frame
            FMovieData myMovieData = new FMovieData(myFlashObject);
            for (int x = 0; x < targetFrame; x++) {
                myMovieData.nextFrame();
            }

            // Export Frame to SVG
            ExportFrameToSVG fes = new ExportFrameToSVG(outputFile, myFlashObject, myMovieData, compressOutput, true, addZeroPoint);
            fes = null;
        } else if (mode == 3) {
            System.out.println("Dumping Sounds");

            FMovieData myMovieData = new FMovieData(myFlashObject);
            Vector myObjects = myFlashObject.getObjectVector();

            for (int i = 0; i < myObjects.size(); i++) {
                Object o = myObjects.get(i);

                if (o instanceof FSound) {
                    FSound fs = (FSound) o;

                    int sid = fs.getID();
                    System.out.println("Exporting Sound " + sid);

                    String tName = outputFile.toString();
                    if (!tName.endsWith("/")) {
                        tName = tName + "/";
                    }
                    tName = tName + "sound_" + sid;

                    exportSoundToFile(fs, tName);
                }
            }
        } else if (mode == 1) {
            System.out.println("Dumping Shapes");

            FMovieData myMovieData = new FMovieData(myFlashObject);
            Vector myObjects = myFlashObject.getObjectVector();

            for (int i = 0; i < myObjects.size(); i++) {
                Object o = myObjects.get(i);

                if (o instanceof FShape) {
                    FShape aShape = (FShape) o;
                    int sid = aShape.getID();
                    System.out.println("Exporting Shape " + sid);
                    FSprite tempSprite = new FSprite(-1, 1, myFlashObject);

                    Tag placeTag = new Tag(26, 1); // Place Object
                    Tag showTag = new Tag(1, 0); // Show Object
                    Tag stopTag = new Tag(0, 0); // Stop Object

                    FRect sRect = aShape.getRect();
                    FMatrix pMatrix = new FMatrix();
                    if (specialMoveShape) {
                        if (sRect.getLeft() < 0) {
                            pMatrix.setTranslateX(sRect.getLeft() * -1);
                        }
                        if (sRect.getTop() < 0) {
                            pMatrix.setTranslateY(sRect.getTop() * -1);
                        }
                    }

                    PlaceObject p02 = new PlaceObject();
                    p02.setPlaceFlagHasCharacter();
                    p02.setPlaceFlagHasMatrix();

                    p02.setID(aShape.getID());
                    p02.setMatrix(pMatrix);
                    p02.setDepth(1);

                    placeTag.myObject = (p02);

                    tempSprite.addTag(placeTag);
                    tempSprite.addTag(showTag);
                    tempSprite.addTag(stopTag);

                    FMovieData newMovie = new FMovieData(tempSprite);
                    newMovie.nextFrame();

                    String tName = outputFile.toString();
                    if (!tName.endsWith("/")) {
                        tName = tName + "/";
                    }
                    tName = tName + "shape" + sid + ".svg";

                    ExportFrameToSVG fes = new ExportFrameToSVG(new File(tName), myFlashObject, newMovie, compressOutput, true, addZeroPoint);
                }
            }
        }

        System.out.println("Done!");

        // Done
        System.exit(0);
    }

    private static void exportSoundToFile(FSound aSound, String path) {


        //myJFileChooser.resetChoosableFileFilters();
        if (aSound.getFormat() == FSound.MP3) {
            // myJFileChooser.setFileFilter(new CommonFileFilter(".mp3", "MP3"));

            path += ".mp3";
        } else if (aSound.getFormat() == FSound.ADPCM) {
            // myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "ADPCM"));

            path += ".wav";
        } else if (aSound.getFormat() == FSound.RAW) {
            // myJFileChooser.setFileFilter(new CommonFileFilter(".raw", "RAW"));

            path += ".raw";
        } else if (aSound.getFormat() == FSound.Uncompressed) {
            // myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Uncompressed"));

            path += ".wav";
        } else if (aSound.getFormat() == FSound.Nellymoser) {
            // myJFileChooser.setFileFilter(new CommonFileFilter(".wav", "Nellymoser"));

            path += ".wav";
        }

        //int returnVal = myJFileChooser.showSaveDialog(myFrame);
        //if(returnVal == JFileChooser.APPROVE_OPTION)


        try {
            FileOutputStream fos = new FileOutputStream(new File(path));

            int[] data = aSound.getData();

            for (int x = 0; x < data.length; x++) {
                fos.write(data[x]);
            }


            fos.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}